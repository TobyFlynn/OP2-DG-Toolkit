//
// auto-generated by op2.py
//

//global constants
#ifndef MAX_CONST_SIZE
#define MAX_CONST_SIZE 128
#endif

__constant__ double gam_cuda;
__constant__ double mu_cuda;
__constant__ double nu0_cuda;
__constant__ double nu1_cuda;
__constant__ double rho0_cuda;
__constant__ double rho1_cuda;
__constant__ double bc_mach_cuda;
__constant__ double bc_alpha_cuda;
__constant__ double bc_p_cuda;
__constant__ double bc_u_cuda;
__constant__ double bc_v_cuda;
__constant__ int FMASK_cuda[15];
__constant__ double ic_u_cuda;
__constant__ double ic_v_cuda;
__constant__ double cubW_g_cuda[46];
__constant__ double cubV_g_cuda[690];
__constant__ double cubVDr_g_cuda[690];
__constant__ double cubVDs_g_cuda[690];
__constant__ double gF0Dr_g_cuda[105];
__constant__ double gF0Ds_g_cuda[105];
__constant__ double gF1Dr_g_cuda[105];
__constant__ double gF1Ds_g_cuda[105];
__constant__ double gF2Dr_g_cuda[105];
__constant__ double gF2Ds_g_cuda[105];
__constant__ double gaussW_g_cuda[7];
__constant__ double gFInterp0_g_cuda[105];
__constant__ double gFInterp1_g_cuda[105];
__constant__ double gFInterp2_g_cuda[105];
__constant__ double gF0DrR_g_cuda[105];
__constant__ double gF0DsR_g_cuda[105];
__constant__ double gF1DrR_g_cuda[105];
__constant__ double gF1DsR_g_cuda[105];
__constant__ double gF2DrR_g_cuda[105];
__constant__ double gF2DsR_g_cuda[105];
__constant__ double gFInterp0R_g_cuda[105];
__constant__ double gFInterp1R_g_cuda[105];
__constant__ double gFInterp2R_g_cuda[105];
__constant__ double lift_drag_vec_cuda[5];

//header
#include "op_lib_cpp.h"
#include "op_cuda_rt_support.h"
#include "op_cuda_reduction.h"

void op_decl_const_char(int dim, char const *type,
int size, char *dat, char const *name){
  if (!OP_hybrid_gpu) return;
  if (!strcmp(name,"gam")) {
    cutilSafeCall(cudaMemcpyToSymbol(gam_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"mu")) {
    cutilSafeCall(cudaMemcpyToSymbol(mu_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"nu0")) {
    cutilSafeCall(cudaMemcpyToSymbol(nu0_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"nu1")) {
    cutilSafeCall(cudaMemcpyToSymbol(nu1_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"rho0")) {
    cutilSafeCall(cudaMemcpyToSymbol(rho0_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"rho1")) {
    cutilSafeCall(cudaMemcpyToSymbol(rho1_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"bc_mach")) {
    cutilSafeCall(cudaMemcpyToSymbol(bc_mach_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"bc_alpha")) {
    cutilSafeCall(cudaMemcpyToSymbol(bc_alpha_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"bc_p")) {
    cutilSafeCall(cudaMemcpyToSymbol(bc_p_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"bc_u")) {
    cutilSafeCall(cudaMemcpyToSymbol(bc_u_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"bc_v")) {
    cutilSafeCall(cudaMemcpyToSymbol(bc_v_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"FMASK")) {
    cutilSafeCall(cudaMemcpyToSymbol(FMASK_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"ic_u")) {
    cutilSafeCall(cudaMemcpyToSymbol(ic_u_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"ic_v")) {
    cutilSafeCall(cudaMemcpyToSymbol(ic_v_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"cubW_g")) {
    cutilSafeCall(cudaMemcpyToSymbol(cubW_g_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"cubV_g")) {
    cutilSafeCall(cudaMemcpyToSymbol(cubV_g_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"cubVDr_g")) {
    cutilSafeCall(cudaMemcpyToSymbol(cubVDr_g_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"cubVDs_g")) {
    cutilSafeCall(cudaMemcpyToSymbol(cubVDs_g_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"gF0Dr_g")) {
    cutilSafeCall(cudaMemcpyToSymbol(gF0Dr_g_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"gF0Ds_g")) {
    cutilSafeCall(cudaMemcpyToSymbol(gF0Ds_g_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"gF1Dr_g")) {
    cutilSafeCall(cudaMemcpyToSymbol(gF1Dr_g_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"gF1Ds_g")) {
    cutilSafeCall(cudaMemcpyToSymbol(gF1Ds_g_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"gF2Dr_g")) {
    cutilSafeCall(cudaMemcpyToSymbol(gF2Dr_g_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"gF2Ds_g")) {
    cutilSafeCall(cudaMemcpyToSymbol(gF2Ds_g_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"gaussW_g")) {
    cutilSafeCall(cudaMemcpyToSymbol(gaussW_g_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"gFInterp0_g")) {
    cutilSafeCall(cudaMemcpyToSymbol(gFInterp0_g_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"gFInterp1_g")) {
    cutilSafeCall(cudaMemcpyToSymbol(gFInterp1_g_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"gFInterp2_g")) {
    cutilSafeCall(cudaMemcpyToSymbol(gFInterp2_g_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"gF0DrR_g")) {
    cutilSafeCall(cudaMemcpyToSymbol(gF0DrR_g_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"gF0DsR_g")) {
    cutilSafeCall(cudaMemcpyToSymbol(gF0DsR_g_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"gF1DrR_g")) {
    cutilSafeCall(cudaMemcpyToSymbol(gF1DrR_g_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"gF1DsR_g")) {
    cutilSafeCall(cudaMemcpyToSymbol(gF1DsR_g_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"gF2DrR_g")) {
    cutilSafeCall(cudaMemcpyToSymbol(gF2DrR_g_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"gF2DsR_g")) {
    cutilSafeCall(cudaMemcpyToSymbol(gF2DsR_g_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"gFInterp0R_g")) {
    cutilSafeCall(cudaMemcpyToSymbol(gFInterp0R_g_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"gFInterp1R_g")) {
    cutilSafeCall(cudaMemcpyToSymbol(gFInterp1R_g_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"gFInterp2R_g")) {
    cutilSafeCall(cudaMemcpyToSymbol(gFInterp2R_g_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"lift_drag_vec")) {
    cutilSafeCall(cudaMemcpyToSymbol(lift_drag_vec_cuda, dat, dim*size));
  }
  else
  {
    printf("error: unknown const name\n"); exit(1);
  }
}

//user kernel files
#include "init_nodes_kernel.cu"
#include "init_grid_kernel.cu"
#include "init_edges_kernel.cu"
#include "div_kernel.cu"
#include "curl_kernel.cu"
#include "grad_kernel.cu"
