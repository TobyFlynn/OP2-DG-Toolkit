//
// auto-generated by op2.py
//

//global constants
#ifndef MAX_CONST_SIZE
#define MAX_CONST_SIZE 128
#endif

#include "dg_compiler_defs.h"

__constant__ int FMASK_cuda[DG_ORDER * DG_NPF * 3];
__constant__ double cubW_g_cuda[DG_ORDER * DG_CUB_NP];
__constant__ double gaussW_g_cuda[DG_ORDER * DG_GF_NP];
__constant__ double DG_CONSTANTS_cuda[DG_ORDER * 5];

//header
#include "op_lib_cpp.h"
#include "op_cuda_rt_support.h"
#include "op_cuda_reduction.h"

#include "dg_global_constants.h"

void set_cuda_const() {
  cutilSafeCall(cudaMemcpyToSymbol(FMASK_cuda, FMASK, DG_ORDER * DG_NPF * 3 * sizeof(int)));
  cutilSafeCall(cudaMemcpyToSymbol(cubW_g_cuda, cubW_g, DG_ORDER * DG_CUB_NP * sizeof(double)));
  cutilSafeCall(cudaMemcpyToSymbol(gaussW_g_cuda, gaussW_g, DG_ORDER * DG_GF_NP * sizeof(double)));
  cutilSafeCall(cudaMemcpyToSymbol(DG_CONSTANTS_cuda, DG_CONSTANTS, DG_ORDER * 5 * sizeof(double)));
}

//user kernel files
#include "init_cubature_kernel.cu"
#include "init_gauss_kernel.cu"
#include "init_nodes_kernel.cu"
#include "init_grid_kernel.cu"
#include "init_edges_kernel.cu"
#include "div_kernel.cu"
#include "curl_kernel.cu"
#include "grad_kernel.cu"
#include "cub_grad_kernel.cu"
#include "cub_div_kernel.cu"
#include "cub_grad_weak_kernel.cu"
#include "cub_div_weak_kernel.cu"
#include "inv_J_kernel.cu"
#include "cub_mm_init_kernel.cu"
#include "gemv_cub_dr_kernel.cu"
#include "gemv_cub_ds_kernel.cu"
#include "gemv_cub_v_kernel.cu"
#include "gemv_dr_kernel.cu"
#include "gemv_ds_kernel.cu"
#include "gemv_gauss_interp_kernel.cu"
#include "gemv_inv_mass_kernel.cu"
#include "init_order_kernel.cu"
#include "gemv_lift_kernel.cu"
#include "gemv_mass_kernel.cu"
