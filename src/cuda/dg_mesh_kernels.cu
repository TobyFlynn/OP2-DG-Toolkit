//
// auto-generated by op2.py
//

//global constants
#ifndef MAX_CONST_SIZE
#define MAX_CONST_SIZE 128
#endif

__constant__ double gam_cuda;
__constant__ double mu_cuda;
__constant__ double nu0_cuda;
__constant__ double nu1_cuda;
__constant__ double rho0_cuda;
__constant__ double rho1_cuda;
__constant__ double ren_cuda;
__constant__ double bc_mach_cuda;
__constant__ double bc_alpha_cuda;
__constant__ double bc_p_cuda;
__constant__ double bc_u_cuda;
__constant__ double bc_v_cuda;
__constant__ int FMASK_cuda[15];
__constant__ double ic_u_cuda;
__constant__ double ic_v_cuda;
__constant__ double cubW_g_cuda[46];
__constant__ double cubV_g_cuda[690];
__constant__ double cubVDr_g_cuda[690];
__constant__ double cubVDs_g_cuda[690];
__constant__ double gF0Dr_g_cuda[105];
__constant__ double gF0Ds_g_cuda[105];
__constant__ double gF1Dr_g_cuda[105];
__constant__ double gF1Ds_g_cuda[105];
__constant__ double gF2Dr_g_cuda[105];
__constant__ double gF2Ds_g_cuda[105];
__constant__ double gaussW_g_cuda[7];
__constant__ double gFInterp0_g_cuda[105];
__constant__ double gFInterp1_g_cuda[105];
__constant__ double gFInterp2_g_cuda[105];
__constant__ double gF0DrR_g_cuda[105];
__constant__ double gF0DsR_g_cuda[105];
__constant__ double gF1DrR_g_cuda[105];
__constant__ double gF1DsR_g_cuda[105];
__constant__ double gF2DrR_g_cuda[105];
__constant__ double gF2DsR_g_cuda[105];
__constant__ double gFInterp0R_g_cuda[105];
__constant__ double gFInterp1R_g_cuda[105];
__constant__ double gFInterp2R_g_cuda[105];
__constant__ double lift_drag_vec_cuda[5];

//header
#include "op_lib_cpp.h"
#include "op_cuda_rt_support.h"
#include "op_cuda_reduction.h"

#include "dg_global_constants.h"

void set_cuda_const() {
  cutilSafeCall(cudaMemcpyToSymbol(gam_cuda, &gam, sizeof(double)));
  cutilSafeCall(cudaMemcpyToSymbol(mu_cuda, &mu, sizeof(double)));
  cutilSafeCall(cudaMemcpyToSymbol(nu0_cuda, &nu0, sizeof(double)));
  cutilSafeCall(cudaMemcpyToSymbol(nu1_cuda, &nu1, sizeof(double)));
  cutilSafeCall(cudaMemcpyToSymbol(rho0_cuda, &rho0, sizeof(double)));
  cutilSafeCall(cudaMemcpyToSymbol(rho1_cuda, &rho1, sizeof(double)));
  cutilSafeCall(cudaMemcpyToSymbol(ren_cuda, &ren, sizeof(double)));
  cutilSafeCall(cudaMemcpyToSymbol(bc_mach_cuda, &bc_mach, sizeof(double)));
  cutilSafeCall(cudaMemcpyToSymbol(bc_alpha_cuda, &bc_alpha, sizeof(double)));
  cutilSafeCall(cudaMemcpyToSymbol(bc_p_cuda, &bc_p, sizeof(double)));
  cutilSafeCall(cudaMemcpyToSymbol(bc_u_cuda, &bc_u, sizeof(double)));
  cutilSafeCall(cudaMemcpyToSymbol(bc_v_cuda, &bc_v, sizeof(double)));
  cutilSafeCall(cudaMemcpyToSymbol(FMASK_cuda, FMASK, 15 * sizeof(int)));
  cutilSafeCall(cudaMemcpyToSymbol(ic_u_cuda, &ic_u, sizeof(double)));
  cutilSafeCall(cudaMemcpyToSymbol(ic_v_cuda, &ic_v, sizeof(double)));
  cutilSafeCall(cudaMemcpyToSymbol(cubW_g_cuda, cubW_g, 46 * sizeof(double)));
  cutilSafeCall(cudaMemcpyToSymbol(cubV_g_cuda, cubV_g, 690 * sizeof(double)));
  cutilSafeCall(cudaMemcpyToSymbol(cubVDr_g_cuda, cubVDr_g, 690 * sizeof(double)));
  cutilSafeCall(cudaMemcpyToSymbol(cubVDs_g_cuda, cubVDs_g, 690 * sizeof(double)));
  cutilSafeCall(cudaMemcpyToSymbol(gF0Dr_g_cuda, gF0Dr_g, 105 * sizeof(double)));
  cutilSafeCall(cudaMemcpyToSymbol(gF0Ds_g_cuda, gF0Ds_g, 105 * sizeof(double)));
  cutilSafeCall(cudaMemcpyToSymbol(gF1Dr_g_cuda, gF1Dr_g, 105 * sizeof(double)));
  cutilSafeCall(cudaMemcpyToSymbol(gF1Ds_g_cuda, gF1Ds_g, 105 * sizeof(double)));
  cutilSafeCall(cudaMemcpyToSymbol(gF2Dr_g_cuda, gF2Dr_g, 105 * sizeof(double)));
  cutilSafeCall(cudaMemcpyToSymbol(gF2Ds_g_cuda, gF2Ds_g, 105 * sizeof(double)));
  cutilSafeCall(cudaMemcpyToSymbol(gaussW_g_cuda, gaussW_g, 7 * sizeof(double)));
  cutilSafeCall(cudaMemcpyToSymbol(gFInterp0_g_cuda, gFInterp0_g, 105 * sizeof(double)));
  cutilSafeCall(cudaMemcpyToSymbol(gFInterp1_g_cuda, gFInterp1_g, 105 * sizeof(double)));
  cutilSafeCall(cudaMemcpyToSymbol(gFInterp2_g_cuda, gFInterp2_g, 105 * sizeof(double)));
  cutilSafeCall(cudaMemcpyToSymbol(gF0DrR_g_cuda, gF0DrR_g, 105 * sizeof(double)));
  cutilSafeCall(cudaMemcpyToSymbol(gF0DsR_g_cuda, gF0DsR_g, 105 * sizeof(double)));
  cutilSafeCall(cudaMemcpyToSymbol(gF1DrR_g_cuda, gF1DrR_g, 105 * sizeof(double)));
  cutilSafeCall(cudaMemcpyToSymbol(gF1DsR_g_cuda, gF1DsR_g, 105 * sizeof(double)));
  cutilSafeCall(cudaMemcpyToSymbol(gF2DrR_g_cuda, gF2DrR_g, 105 * sizeof(double)));
  cutilSafeCall(cudaMemcpyToSymbol(gF2DsR_g_cuda, gF2DsR_g, 105 * sizeof(double)));
  cutilSafeCall(cudaMemcpyToSymbol(gFInterp0R_g_cuda, gFInterp0R_g, 105 * sizeof(double)));
  cutilSafeCall(cudaMemcpyToSymbol(gFInterp1R_g_cuda, gFInterp1R_g, 105 * sizeof(double)));
  cutilSafeCall(cudaMemcpyToSymbol(gFInterp2R_g_cuda, gFInterp2R_g, 105 * sizeof(double)));
  cutilSafeCall(cudaMemcpyToSymbol(lift_drag_vec_cuda, lift_drag_vec, 5 * sizeof(double)));
}

//user kernel files
#include "init_cubature_kernel.cu"
#include "init_gauss_kernel.cu"
#include "init_nodes_kernel.cu"
#include "init_grid_kernel.cu"
#include "init_edges_kernel.cu"
#include "div_kernel.cu"
#include "curl_kernel.cu"
#include "grad_kernel.cu"
#include "cub_grad_kernel.cu"
#include "cub_div_kernel.cu"
#include "cub_grad_weak_kernel.cu"
#include "cub_div_weak_kernel.cu"
#include "inv_J_kernel.cu"
