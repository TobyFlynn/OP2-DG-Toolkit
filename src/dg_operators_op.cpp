//
// auto-generated by op2.py
//

#include "dg_operators.h"

#include  "op_lib_cpp.h"

//
// op_par_loop declarations
//
#ifdef OPENACC
#ifdef __cplusplus
extern "C" {
#endif
#endif

void op_par_loop_div(char const *, op_set,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg );

void op_par_loop_curl(char const *, op_set,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg );

void op_par_loop_grad(char const *, op_set,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg );

void op_par_loop_cub_grad(char const *, op_set,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg );

void op_par_loop_cub_div(char const *, op_set,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg );

void op_par_loop_cub_grad_weak(char const *, op_set,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg );

void op_par_loop_cub_div_weak(char const *, op_set,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg );

void op_par_loop_inv_J(char const *, op_set,
  op_arg,
  op_arg,
  op_arg,
  op_arg );
#ifdef OPENACC
#ifdef __cplusplus
}
#endif
#endif

#include "dg_mesh.h"
#include "dg_blas_calls.h"
#include "dg_compiler_defs.h"
#include "dg_op2_blas.h"

void div(DGMesh *mesh, op_dat u, op_dat v, op_dat res) {
  op2_gemv(mesh, false, 1.0, DGConstants::DR, u, 0.0, mesh->op_tmp[0]);
  op2_gemv(mesh, false, 1.0, DGConstants::DS, u, 0.0, mesh->op_tmp[1]);
  op2_gemv(mesh, false, 1.0, DGConstants::DR, v, 0.0, mesh->op_tmp[2]);
  op2_gemv(mesh, false, 1.0, DGConstants::DS, v, 0.0, mesh->op_tmp[3]);

  op_par_loop_div("div",mesh->cells,
              op_arg_dat(mesh->order,-1,OP_ID,1,"int",OP_READ),
              op_arg_dat(mesh->op_tmp[0],-1,OP_ID,DG_NP,"double",OP_READ),
              op_arg_dat(mesh->op_tmp[1],-1,OP_ID,DG_NP,"double",OP_READ),
              op_arg_dat(mesh->op_tmp[2],-1,OP_ID,DG_NP,"double",OP_READ),
              op_arg_dat(mesh->op_tmp[3],-1,OP_ID,DG_NP,"double",OP_READ),
              op_arg_dat(mesh->rx,-1,OP_ID,DG_NP,"double",OP_READ),
              op_arg_dat(mesh->sx,-1,OP_ID,DG_NP,"double",OP_READ),
              op_arg_dat(mesh->ry,-1,OP_ID,DG_NP,"double",OP_READ),
              op_arg_dat(mesh->sy,-1,OP_ID,DG_NP,"double",OP_READ),
              op_arg_dat(res,-1,OP_ID,DG_NP,"double",OP_WRITE));
}

void curl(DGMesh *mesh, op_dat u, op_dat v, op_dat res) {
  // Same matrix multiplications as div
  op2_gemv(mesh, false, 1.0, DGConstants::DR, u, 0.0, mesh->op_tmp[0]);
  op2_gemv(mesh, false, 1.0, DGConstants::DS, u, 0.0, mesh->op_tmp[1]);
  op2_gemv(mesh, false, 1.0, DGConstants::DR, v, 0.0, mesh->op_tmp[2]);
  op2_gemv(mesh, false, 1.0, DGConstants::DS, v, 0.0, mesh->op_tmp[3]);

  op_par_loop_curl("curl",mesh->cells,
              op_arg_dat(mesh->order,-1,OP_ID,1,"int",OP_READ),
              op_arg_dat(mesh->op_tmp[0],-1,OP_ID,DG_NP,"double",OP_READ),
              op_arg_dat(mesh->op_tmp[1],-1,OP_ID,DG_NP,"double",OP_READ),
              op_arg_dat(mesh->op_tmp[2],-1,OP_ID,DG_NP,"double",OP_READ),
              op_arg_dat(mesh->op_tmp[3],-1,OP_ID,DG_NP,"double",OP_READ),
              op_arg_dat(mesh->rx,-1,OP_ID,DG_NP,"double",OP_READ),
              op_arg_dat(mesh->sx,-1,OP_ID,DG_NP,"double",OP_READ),
              op_arg_dat(mesh->ry,-1,OP_ID,DG_NP,"double",OP_READ),
              op_arg_dat(mesh->sy,-1,OP_ID,DG_NP,"double",OP_READ),
              op_arg_dat(res,-1,OP_ID,DG_NP,"double",OP_WRITE));
}

void grad(DGMesh *mesh, op_dat u, op_dat ux, op_dat uy) {
  op2_gemv(mesh, false, 1.0, DGConstants::DR, u, 0.0, mesh->op_tmp[0]);
  op2_gemv(mesh, false, 1.0, DGConstants::DS, u, 0.0, mesh->op_tmp[1]);

  op_par_loop_grad("grad",mesh->cells,
              op_arg_dat(mesh->order,-1,OP_ID,1,"int",OP_READ),
              op_arg_dat(mesh->op_tmp[0],-1,OP_ID,DG_NP,"double",OP_READ),
              op_arg_dat(mesh->op_tmp[1],-1,OP_ID,DG_NP,"double",OP_READ),
              op_arg_dat(mesh->rx,-1,OP_ID,DG_NP,"double",OP_READ),
              op_arg_dat(mesh->sx,-1,OP_ID,DG_NP,"double",OP_READ),
              op_arg_dat(mesh->ry,-1,OP_ID,DG_NP,"double",OP_READ),
              op_arg_dat(mesh->sy,-1,OP_ID,DG_NP,"double",OP_READ),
              op_arg_dat(ux,-1,OP_ID,DG_NP,"double",OP_WRITE),
              op_arg_dat(uy,-1,OP_ID,DG_NP,"double",OP_WRITE));
}

void cub_grad(DGMesh *mesh, op_dat u, op_dat ux, op_dat uy) {
  op2_gemv(mesh, false, 1.0, DGConstants::CUB_DR, u, 0.0, mesh->cubature->op_tmp[0]);
  op2_gemv(mesh, false, 1.0, DGConstants::CUB_DS, u, 0.0, mesh->cubature->op_tmp[1]);

  op_par_loop_cub_grad("cub_grad",mesh->cells,
              op_arg_dat(mesh->order,-1,OP_ID,1,"int",OP_READ),
              op_arg_dat(mesh->cubature->rx,-1,OP_ID,DG_CUB_NP,"double",OP_READ),
              op_arg_dat(mesh->cubature->sx,-1,OP_ID,DG_CUB_NP,"double",OP_READ),
              op_arg_dat(mesh->cubature->ry,-1,OP_ID,DG_CUB_NP,"double",OP_READ),
              op_arg_dat(mesh->cubature->sy,-1,OP_ID,DG_CUB_NP,"double",OP_READ),
              op_arg_dat(mesh->cubature->J,-1,OP_ID,DG_CUB_NP,"double",OP_READ),
              op_arg_dat(mesh->cubature->op_tmp[0],-1,OP_ID,DG_CUB_NP,"double",OP_RW),
              op_arg_dat(mesh->cubature->op_tmp[1],-1,OP_ID,DG_CUB_NP,"double",OP_RW));

  op2_gemv(mesh, true, 1.0, DGConstants::CUB_V, mesh->cubature->op_tmp[0], 0.0, ux);
  op2_gemv(mesh, true, 1.0, DGConstants::CUB_V, mesh->cubature->op_tmp[1], 0.0, uy);
}

void cub_div(DGMesh *mesh, op_dat u, op_dat v, op_dat res) {
  op2_gemv(mesh, false, 1.0, DGConstants::CUB_DR, u, 0.0, mesh->cubature->op_tmp[0]);
  op2_gemv(mesh, false, 1.0, DGConstants::CUB_DS, u, 0.0, mesh->cubature->op_tmp[1]);
  op2_gemv(mesh, false, 1.0, DGConstants::CUB_DR, v, 0.0, mesh->cubature->op_tmp[2]);
  op2_gemv(mesh, false, 1.0, DGConstants::CUB_DS, v, 0.0, mesh->cubature->op_tmp[3]);

  op_par_loop_cub_div("cub_div",mesh->cells,
              op_arg_dat(mesh->order,-1,OP_ID,1,"int",OP_READ),
              op_arg_dat(mesh->cubature->rx,-1,OP_ID,DG_CUB_NP,"double",OP_READ),
              op_arg_dat(mesh->cubature->sx,-1,OP_ID,DG_CUB_NP,"double",OP_READ),
              op_arg_dat(mesh->cubature->ry,-1,OP_ID,DG_CUB_NP,"double",OP_READ),
              op_arg_dat(mesh->cubature->sy,-1,OP_ID,DG_CUB_NP,"double",OP_READ),
              op_arg_dat(mesh->cubature->J,-1,OP_ID,DG_CUB_NP,"double",OP_READ),
              op_arg_dat(mesh->cubature->op_tmp[0],-1,OP_ID,DG_CUB_NP,"double",OP_RW),
              op_arg_dat(mesh->cubature->op_tmp[1],-1,OP_ID,DG_CUB_NP,"double",OP_READ),
              op_arg_dat(mesh->cubature->op_tmp[2],-1,OP_ID,DG_CUB_NP,"double",OP_READ),
              op_arg_dat(mesh->cubature->op_tmp[3],-1,OP_ID,DG_CUB_NP,"double",OP_READ));

  op2_gemv(mesh, true, 1.0, DGConstants::CUB_V, mesh->cubature->op_tmp[0], 0.0, res);
}

void cub_grad_weak(DGMesh *mesh, op_dat u, op_dat ux, op_dat uy) {
  op2_gemv(mesh, false, 1.0, DGConstants::CUB_V, u, 0.0, mesh->cubature->op_tmp[0]);

  op_par_loop_cub_grad_weak("cub_grad_weak",mesh->cells,
              op_arg_dat(mesh->order,-1,OP_ID,1,"int",OP_READ),
              op_arg_dat(mesh->cubature->op_tmp[0],-1,OP_ID,DG_CUB_NP,"double",OP_RW),
              op_arg_dat(mesh->cubature->rx,-1,OP_ID,DG_CUB_NP,"double",OP_READ),
              op_arg_dat(mesh->cubature->sx,-1,OP_ID,DG_CUB_NP,"double",OP_READ),
              op_arg_dat(mesh->cubature->ry,-1,OP_ID,DG_CUB_NP,"double",OP_READ),
              op_arg_dat(mesh->cubature->sy,-1,OP_ID,DG_CUB_NP,"double",OP_READ),
              op_arg_dat(mesh->cubature->J,-1,OP_ID,DG_CUB_NP,"double",OP_READ),
              op_arg_dat(mesh->cubature->op_tmp[1],-1,OP_ID,DG_CUB_NP,"double",OP_WRITE),
              op_arg_dat(mesh->cubature->op_tmp[2],-1,OP_ID,DG_CUB_NP,"double",OP_WRITE),
              op_arg_dat(mesh->cubature->op_tmp[3],-1,OP_ID,DG_CUB_NP,"double",OP_WRITE));

  op2_gemv(mesh, true, 1.0, DGConstants::CUB_DR, mesh->cubature->op_tmp[0], 0.0, ux);
  op2_gemv(mesh, true, 1.0, DGConstants::CUB_DS, mesh->cubature->op_tmp[1], 1.0, ux);
  op2_gemv(mesh, true, 1.0, DGConstants::CUB_DR, mesh->cubature->op_tmp[2], 0.0, uy);
  op2_gemv(mesh, true, 1.0, DGConstants::CUB_DS, mesh->cubature->op_tmp[3], 1.0, uy);
}

void cub_div_weak(DGMesh *mesh, op_dat u, op_dat v, op_dat res) {
  op2_gemv(mesh, false, 1.0, DGConstants::CUB_V, u, 0.0, mesh->cubature->op_tmp[0]);
  op2_gemv(mesh, false, 1.0, DGConstants::CUB_V, v, 0.0, mesh->cubature->op_tmp[1]);

  op_par_loop_cub_div_weak("cub_div_weak",mesh->cells,
              op_arg_dat(mesh->order,-1,OP_ID,1,"int",OP_READ),
              op_arg_dat(mesh->cubature->op_tmp[0],-1,OP_ID,DG_CUB_NP,"double",OP_RW),
              op_arg_dat(mesh->cubature->op_tmp[1],-1,OP_ID,DG_CUB_NP,"double",OP_RW),
              op_arg_dat(mesh->cubature->rx,-1,OP_ID,DG_CUB_NP,"double",OP_READ),
              op_arg_dat(mesh->cubature->sx,-1,OP_ID,DG_CUB_NP,"double",OP_READ),
              op_arg_dat(mesh->cubature->ry,-1,OP_ID,DG_CUB_NP,"double",OP_READ),
              op_arg_dat(mesh->cubature->sy,-1,OP_ID,DG_CUB_NP,"double",OP_READ),
              op_arg_dat(mesh->cubature->J,-1,OP_ID,DG_CUB_NP,"double",OP_READ),
              op_arg_dat(mesh->cubature->op_tmp[2],-1,OP_ID,DG_CUB_NP,"double",OP_WRITE),
              op_arg_dat(mesh->cubature->op_tmp[3],-1,OP_ID,DG_CUB_NP,"double",OP_WRITE));

  op2_gemv(mesh, true, 1.0, DGConstants::CUB_DR, mesh->cubature->op_tmp[0], 0.0, res);
  op2_gemv(mesh, true, 1.0, DGConstants::CUB_DS, mesh->cubature->op_tmp[1], 1.0, res);
  op2_gemv(mesh, true, 1.0, DGConstants::CUB_DR, mesh->cubature->op_tmp[2], 1.0, res);
  op2_gemv(mesh, true, 1.0, DGConstants::CUB_DS, mesh->cubature->op_tmp[3], 1.0, res);
}

void inv_mass(DGMesh *mesh, op_dat u) {
  op2_gemv(mesh, false, 1.0, DGConstants::INV_MASS, u, 0.0, mesh->op_tmp[0]);

  op_par_loop_inv_J("inv_J",mesh->cells,
              op_arg_dat(mesh->order,-1,OP_ID,1,"int",OP_READ),
              op_arg_dat(mesh->J,-1,OP_ID,DG_NP,"double",OP_READ),
              op_arg_dat(mesh->op_tmp[0],-1,OP_ID,DG_NP,"double",OP_READ),
              op_arg_dat(u,-1,OP_ID,DG_NP,"double",OP_WRITE));
}
