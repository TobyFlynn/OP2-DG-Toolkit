//
// auto-generated by op2.py
//

#include "dg_compiler_defs.h"

// global constants
extern int DG_CONSTANTS[DG_ORDER * 5];
extern int FMASK[DG_ORDER * DG_NPF * 3];
extern double cubW_g[DG_ORDER * DG_CUB_NP];
extern double gaussW_g[DG_ORDER * DG_GF_NP];

// header
#include "op_lib_cpp.h"

// user kernel files
#include "init_cubature_seqkernel.cpp"
#include "cub_mm_init_seqkernel.cpp"
#include "init_gauss_seqkernel.cpp"
#include "init_order_seqkernel.cpp"
#include "init_nodes_seqkernel.cpp"
#include "init_grid_seqkernel.cpp"
#include "init_edges_seqkernel.cpp"
#include "interp_dat_to_new_order_seqkernel.cpp"
#include "copy_new_orders_seqkernel.cpp"
#include "interp_dat_to_new_order_int_seqkernel.cpp"
#include "copy_new_orders_int_seqkernel.cpp"
#include "interp_dat_to_max_order_seqkernel.cpp"
#include "gemv_inv_mass_gauss_interpT_seqkernel.cpp"
#include "gemv_gauss_interpT_seqkernel.cpp"
#include "gemv_gauss_interp_seqkernel.cpp"
#include "gemv_cub_np_npT_seqkernel.cpp"
#include "gemv_cub_np_np_seqkernel.cpp"
#include "gemv_np_npT_seqkernel.cpp"
#include "gemv_np_np_seqkernel.cpp"
#include "gemv_liftT_seqkernel.cpp"
#include "gemv_lift_seqkernel.cpp"
#include "div_seqkernel.cpp"
#include "curl_seqkernel.cpp"
#include "grad_seqkernel.cpp"
#include "cub_grad_seqkernel.cpp"
#include "cub_div_seqkernel.cpp"
#include "cub_grad_weak_seqkernel.cpp"
#include "cub_div_weak_seqkernel.cpp"
#include "inv_J_seqkernel.cpp"
