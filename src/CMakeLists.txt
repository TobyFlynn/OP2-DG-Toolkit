set(TOOLKIT_SRC utils/misc.cpp utils/nodes.cpp utils/polynomial.cpp utils/vandermonde.cpp utils/matrices.cpp utils/interpolate.cpp)
set(COMMON_SRC blas_op/dg_op2_blas_op.cpp dg_dat_pool.cpp)
list(APPEND COMMON_SRC timing.cpp)
list(APPEND COMMON_SRC matrices_op/poisson_matrix_op.cpp)
list(APPEND COMMON_SRC matrices_op/poisson_coarse_matrix_op.cpp)
list(APPEND COMMON_SRC matrices_op/poisson_semi_matrix_free_op.cpp)
list(APPEND COMMON_SRC matrices/poisson_matrix_free.cpp)
list(APPEND COMMON_SRC matrices_op/poisson_matrix_free_diag_op.cpp)
list(APPEND COMMON_SRC config.cpp)

set(CPU_SRC op2_utils/utils_cpu.cpp matrices/poisson_matrix_cpu.cpp matrices/poisson_coarse_matrix_cpu.cpp)
set(GPU_SRC op2_utils/utils_gpu.cu matrices/poisson_matrix_gpu.cu matrices/poisson_coarse_matrix_gpu.cu)
set(HIP_SRC op2_utils/utils_hip.hip matrices/poisson_matrix_hip.hip matrices/poisson_coarse_matrix_hip.hip)

if(SOA EQUAL 1)
  list(APPEND GPU_SRC blas/dg_op2_gemv_kernel_soa_gpu.cu)
  list(APPEND HIP_SRC blas/dg_op2_gemv_kernel_soa_hip.hip)
else()
  list(APPEND GPU_SRC blas/dg_op2_gemv_kernel_gpu.cu)
  list(APPEND HIP_SRC blas/dg_op2_gemv_kernel_hip.hip)
endif()

set(SEQ_CPU_SRC "")
set(OMP_CPU_SRC "")

set(MPI_SRC mpi_helper_func.cpp)

set(LINEAR_SOLVER_SRC linear_solvers/linear_solver.cpp)
list(APPEND LINEAR_SOLVER_SRC linear_solvers/petsc_amg/petsc_amg.cpp)
list(APPEND LINEAR_SOLVER_SRC linear_solvers/petsc_amg/petsc_amg_coarse.cpp)
list(APPEND LINEAR_SOLVER_SRC linear_solvers_op/petsc_block_jacobi/petsc_block_jacobi_op.cpp)
list(APPEND LINEAR_SOLVER_SRC linear_solvers_op/pmultigrid/pmultigrid_op.cpp)
list(APPEND LINEAR_SOLVER_SRC linear_solvers/petsc_pmultigrid/petsc_pmultigrid.cpp)
list(APPEND LINEAR_SOLVER_SRC linear_solvers_op/petsc_inv_mass/petsc_inv_mass_op.cpp)
list(APPEND LINEAR_SOLVER_SRC linear_solvers_op/petsc_jacobi/petsc_jacobi_op.cpp)
list(APPEND LINEAR_SOLVER_SRC linear_solvers_op/initial_guess_extrapolation/initial_guess_extrapolation_op.cpp)
if(HYPRE_DIR)
  list(APPEND LINEAR_SOLVER_SRC linear_solvers/hypre_amg/hypre_amg.cpp)
endif()

set(LINEAR_SOLVER_CPU_SRC linear_solvers/petsc_utils/utils_cpu.cpp)
list(APPEND LINEAR_SOLVER_CPU_SRC linear_solvers/petsc_block_jacobi/petsc_block_jacobi_cpu.cpp)
list(APPEND LINEAR_SOLVER_CPU_SRC linear_solvers/petsc_pmultigrid/petsc_pmultigrid_cpu.cpp)
list(APPEND LINEAR_SOLVER_CPU_SRC linear_solvers/petsc_inv_mass/petsc_inv_mass_cpu.cpp)
list(APPEND LINEAR_SOLVER_CPU_SRC linear_solvers/petsc_jacobi/petsc_jacobi_cpu.cpp)

set(LINEAR_SOLVER_GPU_SRC linear_solvers/petsc_utils/utils_gpu.cu)
list(APPEND LINEAR_SOLVER_GPU_SRC linear_solvers/petsc_block_jacobi/petsc_block_jacobi_gpu.cu)
list(APPEND LINEAR_SOLVER_GPU_SRC linear_solvers/petsc_pmultigrid/petsc_pmultigrid_gpu.cu)
list(APPEND LINEAR_SOLVER_GPU_SRC linear_solvers/petsc_inv_mass/petsc_inv_mass_gpu.cu)
list(APPEND LINEAR_SOLVER_GPU_SRC linear_solvers/petsc_jacobi/petsc_jacobi_gpu.cu)
if(AMGX_DIR)
  list(APPEND LINEAR_SOLVER_GPU_SRC linear_solvers/amgx_amg/amgx_amg.cpp)
endif()
if(NOT SOA EQUAL 1)
  list(APPEND LINEAR_SOLVER_GPU_SRC linear_solvers/petsc_jacobi/custom_kernels/custom_petsc_pre_jacobi.cu)
endif()

set(LINEAR_SOLVER_HIP_SRC linear_solvers/petsc_utils/utils_hip.cpp)
list(APPEND LINEAR_SOLVER_HIP_SRC linear_solvers/petsc_block_jacobi/petsc_block_jacobi_hip.cpp)
list(APPEND LINEAR_SOLVER_HIP_SRC linear_solvers/petsc_pmultigrid/petsc_pmultigrid_hip.cpp)
list(APPEND LINEAR_SOLVER_HIP_SRC linear_solvers/petsc_inv_mass/petsc_inv_mass_hip.cpp)
list(APPEND LINEAR_SOLVER_HIP_SRC linear_solvers/petsc_jacobi/petsc_jacobi_hip.cpp)

if(DIM EQUAL 2)
list(APPEND COMMON_SRC dg_constants/dg_constants_2d.cpp dg_mesh_op/dg_mesh_2d_op.cpp dg_operators_op/dg_operators_2d_op.cpp)
list(APPEND COMMON_SRC matrices_op/2d/poisson_coarse_matrix_op.cpp)
list(APPEND COMMON_SRC matrices_op/2d/poisson_matrix_free_mult_op.cpp)
list(APPEND COMMON_SRC matrices_op/2d/poisson_matrix_free_diag_op.cpp)
list(APPEND COMMON_SRC matrices/2d/poisson_matrix_free.cpp)
list(APPEND COMMON_SRC matrices_op/2d/mm_poisson_matrix_free_op.cpp)
list(APPEND COMMON_SRC matrices_op/2d/factor_poisson_matrix_free_mult_op.cpp)
list(APPEND COMMON_SRC matrices_op/2d/factor_poisson_matrix_free_diag_op.cpp)
list(APPEND COMMON_SRC matrices_op/2d/factor_mm_poisson_matrix_free_diag_op.cpp)
list(APPEND COMMON_SRC matrices_op/2d/factor_poisson_coarse_matrix_op.cpp)
list(APPEND COMMON_SRC ${LINEAR_SOLVER_SRC})

list(APPEND CPU_SRC dg_mesh/dg_mesh_2d_cpu.cpp)
list(APPEND CPU_SRC dg_constants/dg_constants_2d_cpu.cpp)
list(APPEND CPU_SRC ${LINEAR_SOLVER_CPU_SRC})

list(APPEND GPU_SRC dg_mesh/dg_mesh_2d_gpu.cu)
list(APPEND GPU_SRC dg_constants/dg_constants_2d_gpu.cu)
list(APPEND GPU_SRC ${LINEAR_SOLVER_GPU_SRC})

list(APPEND HIP_SRC dg_mesh/dg_mesh_2d_hip.cpp)
list(APPEND HIP_SRC dg_constants/dg_constants_2d_hip.cpp)
list(APPEND HIP_SRC ${LINEAR_SOLVER_HIP_SRC})

elseif(DIM EQUAL 3)
list(APPEND COMMON_SRC dg_constants/dg_constants_3d.cpp dg_mesh_op/dg_mesh_3d_op.cpp dg_operators_op/dg_operators_3d_op.cpp)
list(APPEND COMMON_SRC matrices_op/3d/poisson_matrix_op.cpp)
list(APPEND COMMON_SRC matrices_op/3d/poisson_coarse_matrix_op.cpp)
list(APPEND COMMON_SRC matrices_op/3d/poisson_semi_matrix_free_op.cpp)
list(APPEND COMMON_SRC matrices/3d/poisson_matrix_free.cpp)
list(APPEND COMMON_SRC matrices_op/3d/poisson_matrix_free_mult_op.cpp)
list(APPEND COMMON_SRC matrices_op/3d/poisson_matrix_free_diag_op.cpp)
list(APPEND COMMON_SRC matrices_op/3d/mm_poisson_matrix_op.cpp)
list(APPEND COMMON_SRC matrices_op/3d/mm_poisson_matrix_free_op.cpp)
list(APPEND COMMON_SRC matrices_op/3d/factor_poisson_matrix_op.cpp)
list(APPEND COMMON_SRC matrices_op/3d/factor_poisson_coarse_matrix_op.cpp)
list(APPEND COMMON_SRC matrices_op/3d/factor_poisson_semi_matrix_free_op.cpp)
list(APPEND COMMON_SRC matrices_op/3d/factor_poisson_matrix_free_diag_op.cpp)
list(APPEND COMMON_SRC matrices/3d/factor_poisson_matrix_free.cpp)
list(APPEND COMMON_SRC matrices_op/3d/factor_poisson_matrix_free_mult_op.cpp)
list(APPEND COMMON_SRC matrices_op/3d/factor_mm_poisson_matrix_op.cpp)
list(APPEND COMMON_SRC matrices_op/3d/factor_mm_poisson_semi_matrix_free_op.cpp)
list(APPEND COMMON_SRC matrices_op/3d/factor_mm_poisson_matrix_free_op.cpp)
list(APPEND COMMON_SRC matrices_op/3d/factor_mm_poisson_matrix_free_diag_op.cpp)
list(APPEND COMMON_SRC ${LINEAR_SOLVER_SRC})

list(APPEND CPU_SRC dg_constants/dg_constants_3d_cpu.cpp)
list(APPEND CPU_SRC dg_mesh/dg_mesh_3d_cpu.cpp)
list(APPEND CPU_SRC ${LINEAR_SOLVER_CPU_SRC})

list(APPEND SEQ_CPU_SRC dg_operators/custom_kernels/custom_seq_avg_3d.cpp)
list(APPEND SEQ_CPU_SRC dg_operators/custom_kernels/custom_seq_jump_3d.cpp)
list(APPEND OMP_CPU_SRC dg_operators/custom_kernels/custom_omp_avg_3d.cpp)
list(APPEND OMP_CPU_SRC dg_operators/custom_kernels/custom_omp_jump_3d.cpp)

list(APPEND GPU_SRC dg_constants/dg_constants_3d_gpu.cu)
list(APPEND GPU_SRC dg_mesh/dg_mesh_3d_gpu.cu)
list(APPEND GPU_SRC dg_operators/custom_kernels/custom_grad_3d.cu)
list(APPEND GPU_SRC dg_operators/custom_kernels/custom_mass.cu)
list(APPEND GPU_SRC dg_operators/custom_kernels/custom_avg_3d.cu)
list(APPEND GPU_SRC dg_operators/custom_kernels/custom_jump_3d.cu)
list(APPEND GPU_SRC ${LINEAR_SOLVER_GPU_SRC})
if(NOT SOA EQUAL 1)
  list(APPEND GPU_SRC matrices/3d/custom_kernels/custom_fpmf_grad_3d.cu)
  list(APPEND GPU_SRC matrices/3d/custom_kernels/custom_pmf_3d_mult_cells_merged.cu)
  list(APPEND GPU_SRC matrices/3d/custom_kernels/custom_fpmf_3d_mult_mm.cu)
  list(APPEND GPU_SRC linear_solvers/pmultigrid/custom_kernels/custom_p_multigrid_relaxation_chebyshev_0.cu)
  list(APPEND GPU_SRC linear_solvers/pmultigrid/custom_kernels/custom_p_multigrid_relaxation_chebyshev_1.cu)
  list(APPEND GPU_SRC linear_solvers/pmultigrid/custom_kernels/custom_p_multigrid_relaxation_chebyshev_2.cu)
  list(APPEND GPU_SRC linear_solvers/pmultigrid/custom_kernels/custom_p_multigrid_relaxation_chebyshev_3.cu)
endif()

list(APPEND HIP_SRC dg_constants/dg_constants_3d_hip.cpp)
list(APPEND HIP_SRC dg_mesh/dg_mesh_3d_hip.cpp)
#list(APPEND GPU_SRC dg_operators/custom_kernels/custom_grad_3d.cu)
#list(APPEND GPU_SRC dg_operators/custom_kernels/custom_mass.cu)
#list(APPEND GPU_SRC dg_operators/custom_kernels/custom_avg_3d.cu)
#list(APPEND GPU_SRC dg_operators/custom_kernels/custom_jump_3d.cu)
list(APPEND HIP_SRC ${LINEAR_SOLVER_HIP_SRC})
endif()

# Only needs to be built once
if(DIM EQUAL 2)
  add_library(dgtoolkit STATIC ${TOOLKIT_SRC})
  target_link_libraries(dgtoolkit ${ARMA_LIB} ${OPENBLAS_LIB} ${EXTRA_LIBS})
  set(DG_LIBS dgtoolkit)
endif()

if(DIM EQUAL 2)
  set(DG_LIB_PREFIX op2dgtoolkit_2d)
elseif(DIM EQUAL 3)
  set(DG_LIB_PREFIX op2dgtoolkit_3d)
endif()

if(SOA EQUAL 1)
  set(DG_COMPILER_DEFS DG_OP2_SOA)
else()
  if(DIM EQUAL 2)
    set(DG_COMPILER_DEFS USE_OP2_KERNELS)
  else()
    set(DG_COMPILER_DEFS "")
  endif()
endif()

if(BUILD_SN AND BUILD_CPU)
  add_library(${DG_LIB_PREFIX}_seq STATIC ${COMMON_SRC} ${CPU_SRC} ${SEQ_CPU_SRC} seq/dg_tookit_seqkernels.cpp)
  target_link_libraries(${DG_LIB_PREFIX}_seq dgtoolkit -L${OP2_DIR}/lib -lop2_seq -lop2_hdf5 ${COMMON_LIBS} ${EXTRA_LIBS})
  target_compile_definitions(${DG_LIB_PREFIX}_seq PRIVATE ${LIBXSMM_COMPILE_OPTS} ${DG_COMPILER_DEFS} DG_ORDER=${ORDER} DG_DIM=${DIM} DG_COL_MAJ MAX_CONST_SIZE=1024 ${COMMON_COMPILER_DEFS})

  add_library(${DG_LIB_PREFIX}_openmp STATIC ${COMMON_SRC} ${CPU_SRC} ${OMP_CPU_SRC} openmp/dg_tookit_kernels.cpp)
  target_link_libraries(${DG_LIB_PREFIX}_openmp dgtoolkit -L${OP2_DIR}/lib -lop2_openmp -lop2_hdf5 ${COMMON_LIBS} ${EXTRA_LIBS})
  target_compile_definitions(${DG_LIB_PREFIX}_openmp PRIVATE ${LIBXSMM_COMPILE_OPTS} ${DG_COMPILER_DEFS} DG_ORDER=${ORDER} DG_DIM=${DIM} DG_COL_MAJ MAX_CONST_SIZE=1024 ${COMMON_COMPILER_DEFS})

  list(APPEND DG_LIBS ${DG_LIB_PREFIX}_seq ${DG_LIB_PREFIX}_openmp)
endif()

if(BUILD_SN AND BUILD_GPU)
  add_library(${DG_LIB_PREFIX}_cuda STATIC ${COMMON_SRC} ${GPU_SRC} cuda/dg_tookit_kernels.cu)
  target_link_libraries(${DG_LIB_PREFIX}_cuda dgtoolkit -L${OP2_DIR}/lib -lop2_cuda -lop2_hdf5 ${COMMON_LIBS} ${EXTRA_LIBS} CUDA::cublas)
  target_compile_definitions(${DG_LIB_PREFIX}_cuda PRIVATE ${DG_COMPILER_DEFS} OP2_DG_CUDA ${DG_COMPILER_DEFS} DG_ORDER=${ORDER} DG_DIM=${DIM} DG_COL_MAJ MAX_CONST_SIZE=1024 ${COMMON_COMPILER_DEFS})

  set_property(TARGET ${DG_LIB_PREFIX}_cuda PROPERTY CUDA_SEPARABLE_COMPILATION ON)

  list(APPEND DG_LIBS ${DG_LIB_PREFIX}_cuda)
endif()

if(BUILD_SN AND BUILD_HIP)
  set_source_files_properties(${HIP_SRC} PROPERTIES LANGUAGE HIP)
  add_library(${DG_LIB_PREFIX}_hip STATIC ${COMMON_SRC} ${HIP_SRC} hip/dg_tookit_kernels.cpp)
  target_link_libraries(${DG_LIB_PREFIX}_hip dgtoolkit -L${OP2_DIR}/lib -lop2_hip -lop2_hdf5 ${COMMON_LIBS} ${EXTRA_LIBS})
  target_compile_definitions(${DG_LIB_PREFIX}_hip PRIVATE ${DG_COMPILER_DEFS} OP2_DG_CUDA ${DG_COMPILER_DEFS} DG_ORDER=${ORDER} DG_DIM=${DIM} DG_COL_MAJ MAX_CONST_SIZE=1024 ${COMMON_COMPILER_DEFS})

  #set_property(TARGET ${DG_LIB_PREFIX}_hip PROPERTY CUDA_SEPARABLE_COMPILATION ON)

  list(APPEND DG_LIBS ${DG_LIB_PREFIX}_hip)
endif()

if(BUILD_MPI AND BUILD_CPU)
  add_library(${DG_LIB_PREFIX}_mpi STATIC ${COMMON_SRC} ${CPU_SRC} ${SEQ_CPU_SRC} ${MPI_SRC} seq/dg_tookit_seqkernels.cpp)
  target_link_libraries(${DG_LIB_PREFIX}_mpi dgtoolkit -L${OP2_DIR}/lib -lop2_mpi ${COMMON_LIBS} ${PART_LIB} ${EXTRA_LIBS})
  target_compile_definitions(${DG_LIB_PREFIX}_mpi PRIVATE ${LIBXSMM_COMPILE_OPTS} DG_MPI ${DG_COMPILER_DEFS} DG_ORDER=${ORDER} DG_DIM=${DIM} DG_COL_MAJ MAX_CONST_SIZE=1024 ${COMMON_COMPILER_DEFS})

  add_library(${DG_LIB_PREFIX}_mpi_openmp STATIC ${COMMON_SRC} ${CPU_SRC} ${OMP_CPU_SRC} ${MPI_SRC} openmp/dg_tookit_kernels.cpp)
  target_link_libraries(${DG_LIB_PREFIX}_mpi_openmp dgtoolkit -L${OP2_DIR}/lib -lop2_mpi ${COMMON_LIBS} ${PART_LIB} ${EXTRA_LIBS})
  target_compile_definitions(${DG_LIB_PREFIX}_mpi_openmp PRIVATE ${LIBXSMM_COMPILE_OPTS} DG_MPI ${DG_COMPILER_DEFS} DG_ORDER=${ORDER} DG_DIM=${DIM} DG_COL_MAJ MAX_CONST_SIZE=1024 ${COMMON_COMPILER_DEFS})

  list(APPEND DG_LIBS ${DG_LIB_PREFIX}_mpi ${DG_LIB_PREFIX}_mpi_openmp)
endif()

if(BUILD_MPI AND BUILD_GPU)
  add_library(${DG_LIB_PREFIX}_mpi_cuda STATIC ${COMMON_SRC} ${GPU_SRC} ${MPI_SRC} cuda/dg_tookit_kernels.cu)
  target_link_libraries(${DG_LIB_PREFIX}_mpi_cuda dgtoolkit -L${OP2_DIR}/lib -lop2_mpi_cuda ${COMMON_LIBS} ${PART_LIB} ${EXTRA_LIBS} CUDA::cublas)
  target_compile_definitions(${DG_LIB_PREFIX}_mpi_cuda PRIVATE ${DG_COMPILER_DEFS} DG_MPI OP2_DG_CUDA ${DG_COMPILER_DEFS} DG_ORDER=${ORDER} DG_DIM=${DIM} DG_COL_MAJ MAX_CONST_SIZE=1024 ${COMMON_COMPILER_DEFS})

  set_property(TARGET ${DG_LIB_PREFIX}_mpi_cuda PROPERTY CUDA_SEPARABLE_COMPILATION ON)

  list(APPEND DG_LIBS ${DG_LIB_PREFIX}_mpi_cuda)
endif()

install(TARGETS ${DG_LIBS} DESTINATION lib)
