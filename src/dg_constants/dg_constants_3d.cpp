#include "dg_constants/dg_constants_3d.h"

#include "dg_abort.h"
#include "dg_compiler_defs.h"
#include "dg_utils.h"

int FMASK[DG_ORDER * DG_NUM_FACES * DG_NPF];
int DG_CONSTANTS[DG_ORDER * DG_NUM_CONSTANTS];

int FMASK_TK[DG_ORDER * DG_NUM_FACES * DG_NPF];
int DG_CONSTANTS_TK[DG_ORDER * DG_NUM_CONSTANTS];

// TODO not require this
DG_FP cubW_g[1];
DG_FP gaussW_g[1];

void save_mat(DG_FP *mem_ptr, arma::mat &mat, const int N, const int max_size) {
  #ifdef DG_COL_MAJ
  arma::Mat<DG_FP> mat_2 = arma::conv_to<arma::Mat<DG_FP>>::from(mat);
  #else
  arma::Mat<DG_FP> mat_2 = arma::conv_to<arma::Mat<DG_FP>>::from(mat.t());
  #endif
  memcpy(&mem_ptr[(N - 1) * max_size], mat_2.memptr(), mat_2.n_elem * sizeof(DG_FP));
}

void save_vec(DG_FP *mem_ptr, arma::vec &vec, const int N, const int max_size) {
  arma::Col<DG_FP> vec_2 = arma::conv_to<arma::Col<DG_FP>>::from(vec);
  memcpy(&mem_ptr[(N - 1) * max_size], vec_2.memptr(), vec_2.n_elem * sizeof(DG_FP));
}

DGConstants3D::DGConstants3D(const int n_) {
  // Set order
  N_max = n_;
  // Set num points and num face points
  DGUtils::numNodes3D(N_max, &Np_max, &Nfp_max);

  r_ptr   = (DG_FP *)calloc(N_max * Np_max, sizeof(DG_FP));
  s_ptr   = (DG_FP *)calloc(N_max * Np_max, sizeof(DG_FP));
  t_ptr   = (DG_FP *)calloc(N_max * Np_max, sizeof(DG_FP));
  Dr_ptr  = (DG_FP *)calloc(N_max * Np_max * Np_max, sizeof(DG_FP));
  Ds_ptr  = (DG_FP *)calloc(N_max * Np_max * Np_max, sizeof(DG_FP));
  Dt_ptr  = (DG_FP *)calloc(N_max * Np_max * Np_max, sizeof(DG_FP));
  Drw_ptr = (DG_FP *)calloc(N_max * Np_max * Np_max, sizeof(DG_FP));
  Dsw_ptr = (DG_FP *)calloc(N_max * Np_max * Np_max, sizeof(DG_FP));
  Dtw_ptr = (DG_FP *)calloc(N_max * Np_max * Np_max, sizeof(DG_FP));
  mass_ptr = (DG_FP *)calloc(N_max * Np_max * Np_max, sizeof(DG_FP));
  invMass_ptr = (DG_FP *)calloc(N_max * Np_max * Np_max, sizeof(DG_FP));
  invV_ptr = (DG_FP *)calloc(N_max * Np_max * Np_max, sizeof(DG_FP));
  v_ptr = (DG_FP *)calloc(N_max * Np_max * Np_max, sizeof(DG_FP));
  lift_ptr = (DG_FP *)calloc(N_max * DG_NUM_FACES * Nfp_max * Np_max, sizeof(DG_FP));
  mmF0_ptr = (DG_FP *)calloc(N_max * Np_max * Np_max, sizeof(DG_FP));
  mmF1_ptr = (DG_FP *)calloc(N_max * Np_max * Np_max, sizeof(DG_FP));
  mmF2_ptr = (DG_FP *)calloc(N_max * Np_max * Np_max, sizeof(DG_FP));
  mmF3_ptr = (DG_FP *)calloc(N_max * Np_max * Np_max, sizeof(DG_FP));
  eMat_ptr = (DG_FP *)calloc(N_max * DG_NUM_FACES * Nfp_max * Np_max, sizeof(DG_FP));
  order_interp_ptr = (DG_FP *)calloc(N_max * N_max * Np_max * Np_max, sizeof(DG_FP));

  for(int N = 1; N <= N_max; N++) {
    int Np, Nfp;
    DGUtils::numNodes3D(N, &Np, &Nfp);

    arma::vec x_, y_, z_, r_, s_, t_;
    DGUtils::setRefXYZ(N, x_, y_, z_);
    DGUtils::xyz2rst(x_, y_, z_, r_, s_, t_);

    arma::mat v_    = DGUtils::vandermonde3D(r_, s_, t_, N);
    arma::mat invV_ = arma::inv(v_);
    arma::mat mass_ = invV_.t() * invV_;
    arma::mat inv_mass_ = arma::inv(mass_);
    arma::mat dr_, ds_, dt_;
    DGUtils::dMatrices3D(r_, s_, t_, v_, N, dr_, ds_, dt_);

    arma::uvec fmask1_ = arma::find(arma::abs(1 + t_)  < 1e-12);
    arma::uvec fmask2_ = arma::find(arma::abs(1 + s_) < 1e-12);
    arma::uvec fmask3_ = arma::find(arma::abs(1 + r_ + s_ + t_)  < 1e-12);
    arma::uvec fmask4_ = arma::find(arma::abs(1 + r_)  < 1e-12);
    arma::uvec fmask_  = arma::join_cols(fmask1_, fmask2_, fmask3_, fmask4_);

    arma::mat eMat_ = DGUtils::eMat3D(r_, s_, t_, fmask_, N);
    arma::mat lift_ = DGUtils::lift3D(r_, s_, t_, fmask_, v_, N);
    arma::mat mmF0_, mmF1_, mmF2_, mmF3_;
    DGUtils::faceMassMatrix3D(r_, s_, t_, fmask_, v_, N, mmF0_, mmF1_, mmF2_, mmF3_);

    arma::mat vr, vs, vt;
    DGUtils::gradVandermonde3D(r_, s_, t_, N, vr, vs, vt);
    arma::mat drw_ = (v_ * vr.t()) * arma::inv(v_ * v_.t());
    arma::mat dsw_ = (v_ * vs.t()) * arma::inv(v_ * v_.t());
    arma::mat dtw_ = (v_ * vt.t()) * arma::inv(v_ * v_.t());

    save_vec(r_ptr, r_, N, Np_max);
    save_vec(s_ptr, s_, N, Np_max);
    save_vec(t_ptr, t_, N, Np_max);
    save_mat(Dr_ptr, dr_, N, Np_max * Np_max);
    save_mat(Ds_ptr, ds_, N, Np_max * Np_max);
    save_mat(Dt_ptr, dt_, N, Np_max * Np_max);
    save_mat(Drw_ptr, drw_, N, Np_max * Np_max);
    save_mat(Dsw_ptr, dsw_, N, Np_max * Np_max);
    save_mat(Dtw_ptr, dtw_, N, Np_max * Np_max);
    save_mat(mass_ptr, mass_, N, Np_max * Np_max);
    save_mat(invMass_ptr, inv_mass_, N, Np_max * Np_max);
    save_mat(invV_ptr, invV_, N, Np_max * Np_max);
    save_mat(v_ptr, v_, N, Np_max * Np_max);
    save_mat(lift_ptr, lift_, N, DG_NUM_FACES * Nfp_max * Np_max);
    save_mat(mmF0_ptr, mmF0_, N, Np_max * Np_max);
    save_mat(mmF1_ptr, mmF1_, N, Np_max * Np_max);
    save_mat(mmF2_ptr, mmF2_, N, Np_max * Np_max);
    save_mat(mmF3_ptr, mmF3_, N, Np_max * Np_max);
    save_mat(eMat_ptr, eMat_, N, DG_NUM_FACES * Nfp_max * Np_max);

    std::vector<int> fmask_int = arma::conv_to<std::vector<int>>::from(fmask_);
    memcpy(&FMASK[(N - 1) * DG_NUM_FACES * Nfp_max], fmask_int.data(), fmask_int.size() * sizeof(int));
    memcpy(&FMASK_TK[(N - 1) * DG_NUM_FACES * Nfp_max], fmask_int.data(), fmask_int.size() * sizeof(int));

    DG_CONSTANTS[(N - 1) * DG_NUM_CONSTANTS]     = Np;
    DG_CONSTANTS[(N - 1) * DG_NUM_CONSTANTS + 1] = Nfp;
    DG_CONSTANTS_TK[(N - 1) * DG_NUM_CONSTANTS]     = Np;
    DG_CONSTANTS_TK[(N - 1) * DG_NUM_CONSTANTS + 1] = Nfp;
  }

  // 3D volume cubature stuff
  int Np, Nfp;
  DGUtils::numNodes3D(DG_ORDER, &Np, &Nfp);
  arma::vec x_, y_, z_, r_, s_, t_;
  DGUtils::setRefXYZ(DG_ORDER, x_, y_, z_);
  DGUtils::xyz2rst(x_, y_, z_, r_, s_, t_);
  arma::mat v_    = DGUtils::vandermonde3D(r_, s_, t_, DG_ORDER);
  arma::mat invV_ = arma::inv(v_);
  arma::uvec fmask1_ = arma::find(arma::abs(1 + t_)  < 1e-12);
  arma::uvec fmask2_ = arma::find(arma::abs(1 + s_) < 1e-12);
  arma::uvec fmask3_ = arma::find(arma::abs(1 + r_ + s_ + t_)  < 1e-12);
  arma::uvec fmask4_ = arma::find(arma::abs(1 + r_)  < 1e-12);
  arma::uvec fmask_  = arma::join_cols(fmask1_, fmask2_, fmask3_, fmask4_);

  arma::vec cubr, cubs, cubt, cubw;
  getCubatureData(2 * DG_ORDER, cubr, cubs, cubt, cubw);
  arma::mat cubInterp = DGUtils::interpMatrix3D(cubr, cubs, cubt, invV_, DG_ORDER);
  arma::mat cubProj   = DGUtils::cubaturePMat3D(r_, s_, t_, cubr, cubs, cubt, DG_ORDER);
  arma::mat cubPDrT, cubPDsT, cubPDtT;
  DGUtils::cubaturePDwMat3D(r_, s_, t_, cubr, cubs, cubt, DG_ORDER, cubPDrT, cubPDsT, cubPDtT);
  const int cubNp = cubr.n_elem;
  arma::mat diag_w(cubNp, cubNp);
  diag_w.zeros();
  for(int i = 0; i < cubNp; i++) {
    diag_w(i,i) = cubw(i);
  }

  cubProj = cubProj * diag_w;
  cubPDrT = cubPDrT * diag_w;
  cubPDsT = cubPDsT * diag_w;
  cubPDtT = cubPDtT * diag_w;

  cub_r_ptr = (DG_FP *)calloc(DG_CUB_3D_NP, sizeof(DG_FP));
  cub_s_ptr = (DG_FP *)calloc(DG_CUB_3D_NP, sizeof(DG_FP));
  cub_t_ptr = (DG_FP *)calloc(DG_CUB_3D_NP, sizeof(DG_FP));
  cub_w_ptr = (DG_FP *)calloc(DG_CUB_3D_NP, sizeof(DG_FP));
  cubInterp_ptr = (DG_FP *)calloc(DG_NP * DG_CUB_3D_NP, sizeof(DG_FP));
  cubProj_ptr = (DG_FP *)calloc(DG_NP * DG_CUB_3D_NP, sizeof(DG_FP));
  cubPDrT_ptr = (DG_FP *)calloc(DG_NP * DG_CUB_3D_NP, sizeof(DG_FP));
  cubPDsT_ptr = (DG_FP *)calloc(DG_NP * DG_CUB_3D_NP, sizeof(DG_FP));
  cubPDtT_ptr = (DG_FP *)calloc(DG_NP * DG_CUB_3D_NP, sizeof(DG_FP));

  save_vec(cub_r_ptr, cubr, 1, DG_CUB_3D_NP);
  save_vec(cub_s_ptr, cubs, 1, DG_CUB_3D_NP);
  save_vec(cub_t_ptr, cubt, 1, DG_CUB_3D_NP);
  save_vec(cub_w_ptr, cubw, 1, DG_CUB_3D_NP);
  save_mat(cubInterp_ptr, cubInterp, 1, DG_NP * DG_CUB_3D_NP);
  save_mat(cubProj_ptr, cubProj, 1, DG_NP * DG_CUB_3D_NP);
  save_mat(cubPDrT_ptr, cubPDrT, 1, DG_NP * DG_CUB_3D_NP);
  save_mat(cubPDsT_ptr, cubPDsT, 1, DG_NP * DG_CUB_3D_NP);
  save_mat(cubPDtT_ptr, cubPDtT, 1, DG_NP * DG_CUB_3D_NP);

  // 3D surface cubatures
  arma::vec cub_surf_r, cub_surf_s, cub_surf_w;
  DGUtils::cubature2D(2 * DG_ORDER, cub_surf_r, cub_surf_s, cub_surf_w);
  arma::mat interp_cub_surf, lift_cub_surf;
  DGUtils::cubatureSurface3d(r_, s_, t_, fmask_, cub_surf_r, cub_surf_s,
                             cub_surf_w, DG_ORDER, interp_cub_surf, lift_cub_surf);

  cubInterpSurf_ptr = (DG_FP *)calloc(DG_NUM_FACES * DG_NPF * DG_NUM_FACES * DG_CUB_SURF_3D_NP, sizeof(DG_FP));
  cubLiftSurf_ptr   = (DG_FP *)calloc(DG_NP * DG_NUM_FACES * DG_CUB_SURF_3D_NP, sizeof(DG_FP));

  save_mat(cubInterpSurf_ptr, interp_cub_surf, 1, DG_NUM_FACES * DG_NPF * DG_NUM_FACES * DG_CUB_SURF_3D_NP);
  save_mat(cubLiftSurf_ptr, lift_cub_surf, 1, DG_NP * DG_NUM_FACES * DG_CUB_SURF_3D_NP);
}

void DGConstants3D::getCubatureData(const int N, arma::vec &cubr, arma::vec &cubs, arma::vec &cubt, arma::vec &cubw) {
  // Gimbutas Xiao Cubature as used by libparanumal https://github.com/paranumal/libparanumal/blob/main/libs/mesh/meshBasisTet3D.cpp
  const double cubR2[4] = {-6.399406129792692e-01,-6.881337590016283e-01,-5.678471416303044e-01, 6.431450819352392e-01};
  const double cubS2[4] = {-2.693709623707308e-01,-8.507682582880892e-02,-9.992489699425411e-01,-7.526663993430834e-01};
  const double cubT2[4] = {-9.861535288527451e-01,-2.364692878613065e-01,-1.385965858443282e-01,-9.201339027170031e-01};
  const double cubW2[4] = { 4.006945857826349e-01, 3.717034355820901e-01, 4.254585806686327e-01, 1.354767312999743e-01};

  const double cubR4[11] = {-8.055907108248335e-01,-9.408610095870402e-01,-1.345795219044632e-01,-5.194466701438546e-01,-7.411772524221795e-01,-7.569160173321442e-01,-9.846824781744662e-02,-1.614673722409738e-01,-8.655534102132334e-01, 5.050170140193101e-01,-9.190189865448195e-01};
  const double cubS4[11] = {-7.867916548760125e-01,-3.415340805147064e-01,-7.923117671780141e-01,-3.911031951310060e-01, 7.601440783237155e-02,-9.820174798133283e-01,-1.340930190372888e-01,-8.933175209285095e-01, 4.824577641872456e-01,-8.371901631942812e-01,-6.506118826055384e-01};
  const double cubT4[11] = { 3.687808309060797e-01,-3.641928795732112e-01,-2.923535215814058e-01,-7.463965481692164e-01,-3.396191703250704e-01,-3.870120231406193e-01,-8.810867674011320e-01,-9.044371288818271e-01,-9.296321404528026e-01,-8.638012581235871e-01,-9.728785962403947e-01};
  const double cubW4[11] = { 1.419573788739868e-01, 1.469789765713298e-01, 2.066348213549953e-01, 2.578810827328453e-01, 1.015502869940778e-01, 1.059022400907004e-01, 9.262662125018049e-02, 7.991091352874596e-02, 7.385839849543516e-02, 7.369782554124912e-02, 5.233478789978663e-02};

  const double cubR6[23] = {-9.223278313102310e-01,-8.704611261398938e-01,-8.704496791057892e-01,-4.441926613398445e-01,-8.678026751706386e-01,-3.497606828459493e-01,-3.616114393021378e-01,-3.432236575375570e-01,-8.898019550185483e-01,-7.507000727250277e-01,-8.681501536799804e-01,-9.852909523238611e-01, 2.349114402945376e-01,-4.411598941080236e-01,-4.245498103470715e-01, 1.894346037515911e-01,-8.664208004365244e-01, 2.530804034177644e-01,-8.799788339594619e-01,-4.484273990602982e-01,-8.973495876695942e-01,-9.188478978663642e-01, 8.075400026643635e-01};
  const double cubS6[23] = {-9.513620515037141e-01,-4.643116036328488e-01,-9.530644088538914e-01,-8.725342094100046e-01,-8.326423718798897e-01,-3.412405629016029e-01,-3.916614693004364e-01,-9.234226585235092e-01,-2.961216053305913e-01,-6.957923773801387e-01, 2.486427271068594e-01,-5.774046828368271e-01,-8.736000381148603e-01,-4.883584314700274e-01, 1.546915627794538e-01,-8.696440144732590e-01, 6.012655096203365e-02,-5.031009197622103e-01,-5.739176335276283e-01,-8.920077183281708e-01, 6.822779033246367e-01,-9.824360844449622e-01,-9.542683523719533e-01};
  const double cubT6[23] = { 8.058575980272226e-01, 2.735350171170275e-01,-2.182758986579757e-01, 1.898193780435916e-01, 2.601091102219790e-01,-3.463329907619084e-01,-9.112333112855833e-01,-3.594251326046153e-01,-2.378313821873799e-01,-5.975308652711581e-01,-4.928126505135995e-01,-4.976310094449407e-01,-4.831017020321489e-01,-4.608601407334560e-01,-8.707587238532627e-01,-8.667934039847933e-01,-8.460145657980651e-01,-8.757689336328026e-01,-9.483146274785937e-01,-8.799677016676628e-01,-9.254704957232888e-01,-8.227992990621793e-01,-9.413285578336420e-01};
  const double cubW6[23] = { 9.461059802212705e-03, 4.201254651027517e-02, 3.230838250325908e-02, 6.518676786992283e-02, 7.071109854422583e-02, 5.765239559396446e-02, 8.951442161674263e-02, 7.976179688190549e-02, 8.348596704174839e-02, 8.577869596411661e-02, 5.812053074750553e-02, 3.008755637085715e-02, 6.215084550210757e-02, 1.501325393254235e-01, 7.191334750441594e-02, 6.635817345535235e-02, 8.408848251402726e-02, 6.286404062968159e-02, 3.400576568938985e-02, 5.295213019877631e-02, 2.123397224667169e-02, 1.389778096492792e-02, 9.655035855822626e-03};

  const double cubR8[44] = {-9.822888114425899e-01,-9.275906561429631e-01, 2.226730673837682e-01,-9.444464840128696e-01,-6.870266299198677e-01,-6.089078361547958e-01,-9.170116819634433e-01,-5.580450700023645e-01,-1.698468314600223e-01,-4.118669329426861e-02,-8.755112010779593e-01,-5.749615477649417e-01,-2.054490850771143e-01,-9.091052514742826e-01,-5.677206147398416e-01,-9.094185002228330e-01,-1.431844585279626e-01,-7.149707401822105e-01,-6.374756176581090e-01,-5.009584678400951e-01,-2.754950826768038e-02,-5.450759000264900e-01,-6.834818133082194e-01,-9.423454821981293e-01,-5.409187698728505e-01,-2.937288472386135e-02,-9.547781807266793e-01, 4.410223314357435e-01,-6.936967917392711e-02,-9.212395626309886e-01,-9.091309392957807e-01,-1.506998918408216e-01,-5.674717022186972e-01,-5.910163725055539e-01, 4.391466601433898e-01,-9.075988357026712e-01, 6.593440659526384e-04,-9.178994037090353e-01,-9.202866441531541e-01, 5.247357699089055e-01,-3.490076435591544e-03,-9.026219907219561e-01,-9.398955044481340e-01, 9.147632521166054e-01};
  const double cubS8[44] = {-9.647856877462442e-01,-6.218510622599334e-01,-5.385130064107014e-01,-9.483863022549348e-01,-9.070277411778146e-01,-5.007258338842491e-01,-9.018293113450074e-01,-4.841666536913819e-01,-9.137552332442402e-01,-6.001865419341569e-01,-7.520430213443628e-01,-9.323265238055517e-01,-2.342389976685463e-01,-5.573356090065297e-02,-1.281983833195988e-02,-4.995451074139229e-01,-6.355079015532782e-01,-5.438396318898419e-01,-9.383550558001381e-01,-6.706089881993432e-01,-9.151393977087543e-01,-5.993385862443937e-01,-1.762075927031755e-01, 2.221214382715361e-02,-3.296343941797995e-02,-5.807153942587078e-01,-4.990561561653583e-01,-9.264387005305038e-01,-7.637654966347461e-02,-8.990899861365506e-01, 4.971491214915261e-01,-9.380989415677337e-01,-8.912339687875325e-01, 4.033135521287796e-01,-9.104395690079359e-01, 4.474189900834977e-01,-9.284748582425598e-01,-1.024439844950352e-01,-6.712261380303836e-01,-6.987245764371494e-01,-1.721574331223598e-01,-9.908576312509686e-01, 8.816164056632010e-01,-9.980562432619695e-01};
  const double cubT8[44] = { 8.971278595980133e-01, 4.627347200721783e-01,-9.888484539391230e-01,-6.691882821816188e-02, 5.029930723036760e-01, 8.358636492361879e-02, 4.343547141878999e-01,-9.752081532796095e-01,-1.040166136001711e-02,-3.598087864992038e-01,-1.926904499798824e-01, 1.128390196074010e-02,-8.365327435904173e-01,-1.286660109086743e-01,-9.216188536049289e-01,-1.371046408187091e-02,-8.761060769063105e-01,-7.437125204667648e-01,-4.813072216807797e-01,-5.001888985484900e-01,-4.495279454001869e-01,-1.020909426726044e-01,-5.852165297187530e-01,-5.409185738546890e-01,-5.159648853650391e-01,-6.027600446615375e-01,-5.551307150144428e-01,-5.912621521853492e-01,-9.891556333856432e-01,-6.536087826332979e-01,-6.734013134012919e-01,-7.275875175496033e-01,-8.974924697322526e-01,-9.062626934382535e-01,-8.880187106357958e-01,-9.130023710960993e-01,-9.837758984885883e-01,-9.086292685077639e-01,-9.310358490421146e-01,-8.951232201425936e-01,-8.404842580661891e-01,-9.556758578066753e-01,-9.865606423556936e-01,-9.679840315374033e-01};
  const double cubW8[44] = { 2.326911380407538e-03, 2.008502598013748e-02, 1.316868905984896e-02, 1.350522833433149e-02, 2.348338158017796e-02, 2.082185227170751e-02, 2.398518653047993e-02, 2.203915573406974e-02, 3.000608795736148e-02, 1.706584449682616e-02, 3.633991457929743e-02, 4.305733418779512e-02, 3.758091453334270e-02, 3.221112523708480e-02, 4.298833779190321e-02, 4.873345427684407e-02, 5.542332055396455e-02, 5.208361326526754e-02, 3.351878142745155e-02, 7.048390494136669e-02, 4.363636633805530e-02, 7.438998373030328e-02, 7.113840326380720e-02, 3.615671798064746e-02, 5.346507352177339e-02, 6.903949858534457e-02, 3.032496084600489e-02, 1.962654290056966e-02, 9.196571088500877e-03, 2.263363901068635e-02, 2.318560341668196e-02, 3.007898500466981e-02, 3.133189805159075e-02, 2.686228112905257e-02, 2.739338179275024e-02, 2.386507174305719e-02, 1.002820046914775e-02, 2.923266480869545e-02, 1.831436341104725e-02, 2.051792721654784e-02, 1.582056092943098e-02, 3.395867359123967e-03, 2.772112756025174e-03, 2.018593860153416e-03};

  const double cubR10[74] = { 6.517784730010368e-02,-7.619105379214477e-01,-7.757512270699543e-01,-1.820930647800567e-02,-2.607747102875660e-01,-7.709240273679512e-01,-9.385960782586074e-01,-9.376373624955783e-01,-7.467210182428361e-01,-3.400316248731436e-01,-9.652919051084328e-01, 2.405166025801018e-01,-4.027298204212719e-01,-7.613548130161666e-01,-9.302815128201264e-02,-1.650474962583800e-01,-9.663808170607030e-01,-1.912459710232673e-01,-9.296208354624638e-01,-6.976708558367206e-01, 5.611444916483015e-01,-9.538054824488602e-01,-6.607723048792105e-01, 2.678560687806029e-01,-6.459632979621646e-01,-9.513179433594532e-01, 2.671751306285224e-01,-2.979381466761734e-01, 1.720291110545033e-01,-9.394121244845574e-01,-3.433089570523171e-01,-8.667471154851962e-01,-3.959961853465120e-01,-9.746471367028977e-01,-6.709055682201694e-01,-1.725977431011307e-01,-3.209738747577238e-01,-7.426376635037392e-01,-7.585737767282890e-01,-8.339501062356643e-01, 4.564189619948546e-01,-6.994624194964894e-01,-7.350659785104570e-01,-5.116605778881920e-01, 3.183363322888239e-02,-1.747983276416606e-01,-6.455712538545869e-01,-9.754391428751119e-01, 6.298045658810059e-01,-9.329687289891602e-01,-9.355894271645430e-01,-9.412897662791638e-01,-6.519924690908426e-01,-6.484007855015702e-01, 1.985476022784536e-01,-9.340318800246465e-01,-9.377107750198432e-01,-9.285218311769171e-01,-9.324417488177632e-01,-3.241021603478104e-01,-6.384795008595457e-01,-4.957182683133580e-01, 1.193201777114047e-01,-9.866658391033001e-01,-9.229088686052509e-01, 8.934396965837035e-01,-7.928126795048904e-01,-9.923462161339119e-01, 7.480502655303353e-01,-4.858560384748986e-01,-9.903102209448552e-01,-6.660804613648394e-01,-3.635875983588155e-01,-7.326801009347781e-01};
  const double cubS10[74] = {-7.757512270700414e-01, 6.517784729987100e-02,-7.619105379214348e-01,-7.709240273683173e-01,-1.820930647889407e-02,-2.607747102877043e-01,-7.467210182422573e-01,-9.385960782585098e-01,-9.376373624955957e-01, 2.405166025797735e-01,-3.400316248725770e-01,-9.652919051086308e-01,-9.302815128242126e-02,-4.027298204213297e-01,-7.613548130165168e-01,-1.912459710232630e-01,-1.650474962581840e-01,-9.663808170608019e-01, 5.611444916487768e-01,-9.296208354625831e-01,-6.976708558369646e-01, 2.678560687807144e-01,-9.538054824488867e-01,-6.607723048791950e-01, 2.671751306287957e-01,-6.459632979621062e-01,-9.513179433594716e-01,-9.394121244845912e-01,-2.979381466764564e-01, 1.720291110549545e-01,-3.959961853467096e-01,-3.433089570523432e-01,-8.667471154853744e-01,-1.725977431009272e-01,-9.746471367029086e-01,-6.709055682199777e-01,-7.585737767283822e-01,-3.209738747581960e-01,-7.426376635036127e-01,-6.994624194965924e-01,-8.339501062360731e-01, 4.564189619941376e-01, 3.183363322854889e-02,-7.350659785107161e-01,-5.116605778886708e-01,-9.754391428751308e-01,-1.747983276415959e-01,-6.455712538545152e-01,-9.355894271645714e-01, 6.298045658815959e-01,-9.329687289891651e-01,-6.484007855013953e-01,-9.412897662792561e-01,-6.519924690907442e-01,-9.377107750198261e-01, 1.985476022790324e-01,-9.340318800246411e-01,-3.241021603471450e-01,-9.285218311769089e-01,-9.324417488177208e-01, 1.193201777109193e-01,-6.384795008598869e-01,-4.957182683139326e-01, 8.934396965847128e-01,-9.866658391026820e-01,-9.229088686050392e-01, 7.480502655298643e-01,-7.928126795039943e-01,-9.923462161339409e-01,-4.858560384751444e-01,-9.903102209444652e-01,-6.660804613655873e-01,-3.635875983593522e-01,-7.326801009352152e-01};
  const double cubT10[74] = {-5.275160823084778e-01,-5.275160823086784e-01,-5.275160823086025e-01,-9.500919558655234e-01,-9.500919558655199e-01,-9.500919558656692e-01, 6.229544589963890e-01, 6.229544589959419e-01, 6.229544589969793e-01,-9.351930725981743e-01,-9.351930725981473e-01,-9.351930725981669e-01,-7.428872152800948e-01,-7.428872152804732e-01,-7.428872152800838e-01,-6.773257156576789e-01,-6.773257156578382e-01,-6.773257156578504e-01,-9.338528003489132e-01,-9.338528003488458e-01,-9.338528003488543e-01,-6.532782814526801e-01,-6.532782814525367e-01,-6.532782814524829e-01,-6.698938893072007e-01,-6.698938893072497e-01,-6.698938893069852e-01,-9.346788398934703e-01,-9.346788398934202e-01,-9.346788398934556e-01,-3.939477421158102e-01,-3.939477421162904e-01,-3.939477421158435e-01,-1.818495519762574e-01,-1.818495519761044e-01,-1.818495519759868e-01,-1.778146850102663e-01,-1.778146850100838e-01,-1.778146850099773e-01,-9.230064362620708e-01,-9.230064362620121e-01,-9.230064362620096e-01,-7.851070768298830e-01,-7.851070768296919e-01,-7.851070768296160e-01,-2.041912756285660e-01,-2.041912756288685e-01,-2.041912756288133e-01,-7.612464097273302e-01,-7.612464097278605e-01,-7.612464097282768e-01, 2.416830208712831e-01, 2.416830208714436e-01, 2.416830208715526e-01,-3.268049472339450e-01,-3.268049472345868e-01,-3.268049472349763e-01, 1.850657403417951e-01, 1.850657403414275e-01, 1.850657403424453e-01,-9.851224085376650e-01,-9.851224085376012e-01,-9.851224085375707e-01,-9.838649888761907e-01,-9.838649888764406e-01,-9.838649888756519e-01,-9.628913698913086e-01,-9.628913698913258e-01,-9.628913698912855e-01,-5.424318845750749e-01, 9.709306628334797e-01,-1.758615903775734e-03,-9.092372049227418e-01, 1.980403028050551e-01};
  const double cubW10[74] = { 2.756079111468018e-02, 2.756079111473660e-02, 2.756079111473208e-02, 1.651728622129342e-02, 1.651728622129794e-02, 1.651728622126273e-02, 8.827127869984224e-03, 8.827127869990035e-03, 8.827127869980037e-03, 8.185538986460163e-03, 8.185538986463684e-03, 8.185538986433970e-03, 3.387610113488516e-02, 3.387610113487611e-02, 3.387610113486918e-02, 1.675748787500219e-02, 1.675748787498494e-02, 1.675748787495920e-02, 9.313281339996723e-03, 9.313281340003173e-03, 9.313281340004842e-03, 1.753135755552536e-02, 1.753135755551546e-02, 1.753135755551263e-02, 1.827560624231835e-02, 1.827560624231354e-02, 1.827560624230717e-02, 1.218397324826652e-02, 1.218397324827248e-02, 1.218397324827924e-02, 3.576925978360336e-02, 3.576925978361185e-02, 3.576925978361609e-02, 1.498958846787545e-02, 1.498958846785876e-02, 1.498958846786880e-02, 3.745674993988912e-02, 3.745674993992178e-02, 3.745674993992857e-02, 1.667130533373333e-02, 1.667130533371325e-02, 1.667130533372230e-02, 3.643106559328947e-02, 3.643106559329400e-02, 3.643106559330701e-02, 1.575595091854842e-02, 1.575595091860258e-02, 1.575595091855973e-02, 9.531695272862311e-03, 9.531695272852877e-03, 9.531695272855819e-03, 2.221923927343592e-02, 2.221923927340425e-02, 2.221923927340948e-02, 1.356664812179151e-02, 1.356664812180096e-02, 1.356664812179412e-02, 1.518962478003038e-02, 1.518962478002415e-02, 1.518962478003236e-02, 1.094939643308055e-02, 1.094939643309527e-02, 1.094939643309776e-02, 1.053465486327635e-03, 1.053465486335802e-03, 1.053465486342203e-03, 2.256754452207803e-03, 2.256754452196206e-03, 2.256754452192911e-03, 6.210469597922555e-02, 5.092217550654402e-04, 1.567347452275818e-02, 3.721542358429886e-02, 1.522263115666367e-02};

  const double cubR12[122] = {-1.374503437769854e-01,-9.291591635595258e-01, 4.494310271081625e-02,-9.422439932245119e-01, 2.430423677648110e-01,-7.956608618114338e-01,-8.208949817859721e-01,-7.300121447810803e-01,-1.786133718196966e-01,-4.798880252744967e-01, 2.028841008979334e-01,-8.468644315814380e-01,-4.801936918283287e-01,-2.162492056004726e-01,-7.704649664738020e-01,-3.898780668455788e-01,-9.732218982337848e-01, 3.101592620596687e-01,-8.401130268256528e-01,-7.587042371149260e-01, 2.042970932723433e-01,-9.597313293543706e-01,-7.633141983579799e-01, 9.190092199783506e-02,-5.324156538842341e-01,-9.692334606205502e-01,-3.791473546039409e-02,-5.583164813732576e-01,-5.451029263909702e-01,-7.995004912557284e-01,-7.397458104759506e-01,-3.672764754873818e-01,-1.477440514886856e-01,-7.439273446422778e-01, 4.341532062019434e-01,-8.507478973455769e-01,-8.816060112431570e-01,-8.576780070370036e-01, 7.039700978984957e-01,-8.286368529395126e-01,-9.533416421732388e-01,-7.167787839002487e-02,-5.351640020872266e-01,-9.823447747059300e-01,-8.775290251116272e-01,-6.281991826324685e-01,-9.614945926988339e-01,-4.155034713787327e-01,-9.512801798601274e-01,-8.029791970793696e-01,-9.507695663607698e-01,-1.909952628734674e-01,-5.821770063190647e-01,-8.104747619419612e-01,-8.759635613946177e-01,-8.399099562227985e-01,-4.075544098241169e-01,-9.816558398598512e-01,-6.751330775192570e-01,-3.149360040996975e-01,-9.527447173711141e-01,-9.642973907015797e-01, 3.882799450590653e-01,-4.054196893657805e-01,-2.393278735475145e-01,-9.501368719194545e-01, 1.213317675400288e-01,-9.634372956535556e-01,-4.582195921420686e-01, 1.497455178272146e-01,-9.649408756348019e-01,-2.457872011647745e-01,-3.331460493589239e-02,-9.795878526898599e-01,-9.400848917408163e-01, 5.351913398839814e-02,-5.771247308970763e-01,-5.272439333234028e-01,-9.908408885142427e-01,-9.542078132340630e-01, 9.092369697334675e-01,-9.487762812978140e-01, 3.912186294449625e-01,-6.733380907456182e-01,-1.942367507430980e-01,-7.507934072992886e-01,-1.073689634700975e-01,-5.367046095654924e-01,-7.316400271438055e-01, 1.509721024051824e-02,-9.312283446813046e-01,-9.530099739999303e-01, 6.860650921566884e-01,-9.451599502645341e-01,-6.947721730584699e-01,-7.633656849146985e-01, 3.796790207398015e-01,-5.940915240375572e-01,-8.337496877757204e-01,-2.659802125250012e-01,-9.424883056920581e-01,-2.178037054639842e-02,-9.913843356785719e-01,-8.017801206802969e-01, 4.884770153263237e-01,-7.647093103679242e-01,-9.927319239202493e-01, 7.178088783690493e-01,-9.928858092454618e-01,-6.612014489340987e-01, 5.879776998244531e-01,-4.187164755261538e-01,-9.301990868248645e-01,-9.956181752033222e-01,-8.543417457662290e-01,-5.317102318519026e-01, 3.850028351761021e-01,-7.646313205708825e-01,-9.893278459606969e-01,-3.350060800467011e-01,-3.893408313278781e-01,-5.035752568875519e-01};
  const double cubS12[122] = { 4.494310271080339e-02,-1.374503437769800e-01,-9.291591635595342e-01,-7.956608618114207e-01,-9.422439932245108e-01, 2.430423677648021e-01,-1.786133718196977e-01,-8.208949817859824e-01,-7.300121447810836e-01,-8.468644315814318e-01,-4.798880252744660e-01, 2.028841008979130e-01,-7.704649664737874e-01,-4.801936918283312e-01,-2.162492056004864e-01, 3.101592620596832e-01,-3.898780668455887e-01,-9.732218982337789e-01, 2.042970932723419e-01,-8.401130268256584e-01,-7.587042371149224e-01, 9.190092199784240e-02,-9.597313293543740e-01,-7.633141983579822e-01,-3.791473546039571e-02,-5.324156538842368e-01,-9.692334606205503e-01,-7.995004912557280e-01,-5.583164813732471e-01,-5.451029263909755e-01,-1.477440514886944e-01,-7.397458104759530e-01,-3.672764754873972e-01,-8.507478973455825e-01,-7.439273446422684e-01, 4.341532062019415e-01, 7.039700978984880e-01,-8.816060112431580e-01,-8.576780070370065e-01,-7.167787839004998e-02,-8.286368529395153e-01,-9.533416421732391e-01,-8.775290251116095e-01,-5.351640020872259e-01,-9.823447747059338e-01,-4.155034713787540e-01,-6.281991826324663e-01,-9.614945926988320e-01,-9.507695663607681e-01,-9.512801798601279e-01,-8.029791970793906e-01,-8.104747619419593e-01,-1.909952628734482e-01,-5.821770063190658e-01,-4.075544098241037e-01,-8.759635613946225e-01,-8.399099562227862e-01,-3.149360040996973e-01,-9.816558398598504e-01,-6.751330775192623e-01, 3.882799450590572e-01,-9.527447173711093e-01,-9.642973907015800e-01,-9.501368719194521e-01,-4.054196893657869e-01,-2.393278735475080e-01,-4.582195921420612e-01, 1.213317675400408e-01,-9.634372956535532e-01,-2.457872011647652e-01, 1.497455178272235e-01,-9.649408756347968e-01,-9.400848917408172e-01,-3.331460493590697e-02,-9.795878526898629e-01,-5.272439333234166e-01, 5.351913398837858e-02,-5.771247308970848e-01, 9.092369697334570e-01,-9.908408885142483e-01,-9.542078132340662e-01,-6.733380907456206e-01,-9.487762812978144e-01, 3.912186294449516e-01,-1.073689634701154e-01,-1.942367507431101e-01,-7.507934072993036e-01, 1.509721024050988e-02,-5.367046095654978e-01,-7.316400271438089e-01, 6.860650921566785e-01,-9.312283446813061e-01,-9.530099739999284e-01,-7.633656849146908e-01,-9.451599502645367e-01,-6.947721730584682e-01,-8.337496877757223e-01, 3.796790207397898e-01,-5.940915240375597e-01,-2.178037054640109e-02,-2.659802125249980e-01,-9.424883056920595e-01, 4.884770153263270e-01,-9.913843356785754e-01,-8.017801206802900e-01, 7.178088783690437e-01,-7.647093103679297e-01,-9.927319239202509e-01, 5.879776998244501e-01,-9.928858092454629e-01,-6.612014489341050e-01,-9.956181752033096e-01,-4.187164755261620e-01,-9.301990868248643e-01, 3.850028351760949e-01,-8.543417457662337e-01,-5.317102318518995e-01,-7.646313205708875e-01,-9.893278459607124e-01,-3.350060800467284e-01,-3.893408313278872e-01,-5.035752568875422e-01};
  const double cubT12[122] = {-9.783335953742984e-01,-9.783335953742984e-01,-9.783335953743082e-01,-5.051375127288734e-01,-5.051375127288813e-01,-5.051375127288567e-01,-2.704795016132610e-01,-2.704795016132427e-01,-2.704795016132353e-01,-8.761316440420067e-01,-8.761316440420128e-01,-8.761316440420128e-01,-5.330921360973955e-01,-5.330921360973915e-01,-5.330921360973797e-01,-9.470592969803197e-01,-9.470592969803197e-01,-9.470592969803185e-01,-6.054798293317695e-01,-6.054798293317559e-01,-6.054798293317541e-01,-3.688553942854864e-01,-3.688553942854803e-01,-3.688553942854779e-01,-4.604361500348142e-01,-4.604361500348209e-01,-4.604361500348155e-01,-9.708010098004605e-02,-9.708010098005836e-02,-9.708010098004360e-02,-7.452336625479586e-01,-7.452336625479734e-01,-7.452336625479695e-01,-8.394779642140980e-01,-8.394779642141005e-01,-8.394779642141005e-01,-9.646860796183304e-01,-9.646860796183329e-01,-9.646860796183329e-01,-1.463436264971988e-01,-1.463436264972110e-01,-1.463436264972110e-01, 3.950378019047747e-01, 3.950378019047796e-01, 3.950378019047723e-01, 5.197246710055239e-03, 5.197246710044225e-03, 5.197246710045449e-03, 7.050289433002711e-01, 7.050289433002650e-01, 7.050289433002906e-01,-4.163529688654979e-01,-4.163529688655126e-01,-4.163529688654997e-01, 1.234279274415084e-01, 1.234279274415292e-01, 1.234279274415279e-01,-2.827507852118435e-02,-2.827507852117946e-02,-2.827507852118680e-02,-4.712378369863621e-01,-4.712378369863733e-01,-4.712378369863746e-01,-4.051155651672539e-01,-4.051155651672461e-01,-4.051155651672552e-01,-6.996748797444104e-01,-6.996748797444178e-01,-6.996748797444153e-01,-9.390174410276441e-01,-9.390174410276441e-01,-9.390174410276404e-01,-4.701265063342596e-02,-4.701265063341494e-02,-4.701265063342840e-02,-9.491504697678957e-01,-9.491504697678982e-01,-9.491504697678996e-01,-9.641882679851499e-01,-9.641882679851536e-01,-9.641882679851548e-01,-7.691042574015277e-01,-7.691042574015287e-01,-7.691042574015213e-01,-9.476008784874947e-01,-9.476008784874947e-01,-9.476008784874957e-01,-7.467525735312169e-01,-7.467525735312133e-01,-7.467525735312096e-01,-8.018267734754447e-01,-8.018267734754533e-01,-8.018267734754545e-01, 4.032978082376928e-01, 4.032978082376916e-01, 4.032978082376990e-01,-9.518378089265165e-01,-9.518378089265154e-01,-9.518378089265154e-01,-7.697511112365405e-01,-7.697511112365454e-01,-7.697511112365416e-01,-6.953125589674611e-01,-6.953125589674550e-01,-6.953125589674575e-01,-9.603676440808753e-01,-9.603676440808777e-01,-9.603676440808777e-01,-9.338904416448865e-01,-9.338904416448853e-01,-9.338904416448853e-01, 3.445337375543313e-01, 3.445337375543459e-01, 3.445337375543349e-01,-9.989508575579646e-01,-9.989508575579671e-01,-9.989508575579706e-01, 2.938939617126564e-01, 9.679835378821102e-01,-9.949817598598508e-01,-8.319775060163606e-01,-4.892742293373437e-01};
  const double cubW12[122] = { 2.781735057653978e-03, 2.781735057654092e-03, 2.781735057652762e-03, 8.398769485703079e-03, 8.398769485703389e-03, 8.398769485703702e-03, 1.751926923808389e-02, 1.751926923808319e-02, 1.751926923808276e-02, 1.144500673832101e-02, 1.144500673832079e-02, 1.144500673832059e-02, 2.070223832089109e-02, 2.070223832088912e-02, 2.070223832088700e-02, 3.755144648977120e-03, 3.755144648976951e-03, 3.755144648977461e-03, 1.585064692214937e-02, 1.585064692214994e-02, 1.585064692214965e-02, 9.837382530578264e-03, 9.837382530577457e-03, 9.837382530577046e-03, 1.040938129049506e-02, 1.040938129049636e-02, 1.040938129049624e-02, 2.601141444106337e-02, 2.601141444106351e-02, 2.601141444106238e-02, 2.254462784978858e-02, 2.254462784978603e-02, 2.254462784978717e-02, 1.158500980094870e-02, 1.158500980094966e-02, 1.158500980094936e-02, 4.168974300566039e-03, 4.168974300565897e-03, 4.168974300565954e-03, 1.028842110893551e-02, 1.028842110893561e-02, 1.028842110893553e-02, 4.205298136714887e-03, 4.205298136715934e-03, 4.205298136715269e-03, 1.216104814495457e-02, 1.216104814495443e-02, 1.216104814495468e-02, 4.217582910822220e-03, 4.217582910822276e-03, 4.217582910821895e-03, 2.504450458257267e-02, 2.504450458257196e-02, 2.504450458257253e-02, 1.540237379264268e-02, 1.540237379264239e-02, 1.540237379264282e-02, 7.109722872505770e-03, 7.109722872505939e-03, 7.109722872505064e-03, 4.452836223595802e-03, 4.452836223596298e-03, 4.452836223596240e-03, 1.560511141396748e-02, 1.560511141396692e-02, 1.560511141396706e-02, 1.122469707341839e-02, 1.122469707341878e-02, 1.122469707341904e-02, 5.606952565186992e-03, 5.606952565187232e-03, 5.606952565188124e-03, 4.295440580382450e-03, 4.295440580382917e-03, 4.295440580382775e-03, 1.485317436346403e-02, 1.485317436346361e-02, 1.485317436346333e-02, 6.743238395204040e-04, 6.743238395202980e-04, 6.743238395202797e-04, 1.108774447134587e-02, 1.108774447134572e-02, 1.108774447134648e-02, 1.527946705889213e-02, 1.527946705889241e-02, 1.527946705889255e-02, 2.926965483792584e-02, 2.926965483792640e-02, 2.926965483792612e-02, 4.903655570817210e-03, 4.903655570817012e-03, 4.903655570817195e-03, 1.066746136540665e-02, 1.066746136540648e-02, 1.066746136540661e-02, 1.046201140582620e-02, 1.046201140582678e-02, 1.046201140582673e-02, 1.620898349121864e-02, 1.620898349121822e-02, 1.620898349121807e-02, 3.781331883907675e-03, 3.781331883907420e-03, 3.781331883907420e-03, 1.719274762893588e-03, 1.719274762893348e-03, 1.719274762893291e-03, 2.795111755340936e-03, 2.795111755340936e-03, 2.795111755340964e-03, 2.956085825040871e-03, 2.956085825040178e-03, 2.956085825039980e-03, 3.486457943478327e-03, 3.486457943478129e-03, 3.486457943477903e-03, 1.480798009773252e-02, 2.669332563147237e-04, 6.590607255576522e-03, 3.402287040173104e-02, 3.933995650399713e-02};

  const double cubR14[177] = {-8.567523903984056e-01, 2.937321767696985e-01,-5.692613549698415e-01,-5.193473480512563e-01, 1.412680487794378e-01,-8.319937625402691e-01,-9.708892474738398e-01,-9.593489098771848e-01, 4.440149956802136e-01,-9.749418803839179e-01,-3.684585382998631e-01, 9.951912643713334e-02,-2.308758062699288e-01,-8.300439114686674e-01, 3.502705143586354e-02,-2.829109456728378e-01,-7.457066474604837e-01,-6.644950594335102e-01,-5.505346489626760e-01,-7.902266429023022e-01, 3.067760377339515e-01,-8.215286306248032e-01, 2.308477306581685e-02,-3.871904504425462e-01,-9.854112892373914e-01,-5.863008773397973e-01, 8.095953613083051e-02,-8.052559327293417e-01,-7.985311971756309e-01,-3.820306143645372e-01,-2.019721875456377e-01,-9.823300269139608e-01,-9.815052727635920e-01,-9.569583489308782e-01,-9.678392999746168e-01, 1.665560319874374e-01,-8.623336520822803e-01,-9.645317122756909e-01, 7.979301210773273e-01,-9.945047520567687e-01,-3.276980727669719e-01,-2.307085927903063e-01, 6.079556793213509e-02,-5.326462754985429e-01,-5.452872262463172e-01,-5.383521084278374e-02,-8.432515189485366e-01,-2.476363726136155e-01, 1.044364208690578e-01,-8.160190642126887e-01,-2.982800071098369e-01, 3.225964073564471e-01,-5.414443953322645e-01,-9.731776707058488e-01,-9.554207271113230e-01,-9.619077322874070e-01, 6.687677811518801e-01,-9.846649841209297e-01,-3.987370345109075e-01,-4.774806610095652e-01,-5.679869113087561e-01, 1.435556152935313e-02,-8.753919064423815e-01,-2.114016862036898e-01,-9.655172118841630e-01,-5.214829017076167e-02,-9.623380148719576e-01,-9.608693011846281e-01,-8.406253388749148e-01,-9.605000973076959e-01, 6.116223916452550e-01,-8.028459184018204e-01,-9.609541747446682e-01,-6.013382886926650e-01, 5.419800458524395e-01,-6.433130187729085e-01,-6.902954537605610e-01,-9.470225601038479e-02,-9.079006849812619e-01,-2.062635049164693e-01,-9.184813465187585e-01,-8.917774773820670e-01, 6.822193673149513e-02,-5.886734938918742e-01, 3.004201958278954e-01,-8.003296766514031e-01,-5.529337075291529e-01,-8.457093705404592e-01,-6.135265713434932e-01,-8.572698174976345e-01,-9.611864986280678e-01,-6.019932601376445e-01, 4.123065091794484e-01,-8.118099987139180e-01,-8.023473755211947e-01, 5.755357972483064e-01,-5.921536175986672e-01,-9.597575687639389e-01, 5.231101115221591e-01,-9.072484447659781e-01,-2.757518889867298e-01,-2.994770969636995e-01,-9.233890657799098e-01,-1.713576967924220e-01,-6.779908687722540e-01,-4.296978649684835e-01,-4.923548227148208e-01,-8.059174914812960e-01,-7.971189807552446e-01, 3.909606769611357e-01,-9.624516025049893e-01, 3.513898553375933e-01,-8.084228945618219e-01,-9.635359245664379e-01,-4.129022988444946e-01,-8.047600052292334e-01,-9.835803988600644e-01, 7.089094525142836e-03,-5.806062924564268e-01,-5.846458394348144e-01,-2.353981070162650e-01,-9.664022120806307e-01, 1.566894708545493e-01,-9.613552545036474e-01,-8.472233495894415e-01, 6.958108952006254e-01,-7.770896833229748e-01,-9.793952947663495e-01,-7.690278404598587e-01,-6.449042333727806e-01,-2.200647816871925e-01,-9.410792865416311e-01,-9.235556209423426e-01,-5.931991810169928e-01,-6.089556124846054e-01,-9.650342420780642e-01,-2.414487369555118e-01, 1.603915248028213e-01,-9.917797371775030e-01, 1.138438287833665e-02,-8.175856314288508e-01, 9.053183821168509e-01,-9.814952923071467e-01,-9.904223104721384e-01,-2.160132996322185e-01,-6.171636437984327e-01,-2.280396216261566e-01,-8.641058019347291e-01,-8.389926351662794e-01, 9.587125236990479e-02,-3.354078332290266e-01,-3.010696584863675e-01,-6.923879278393141e-01,-7.969656816595116e-01,-7.958731300763120e-01, 3.602938355273282e-01,-7.919304509816861e-01,-4.251550483406301e-01,-9.887971646106728e-01,-5.741149257080890e-01,-9.574385047232588e-01,-9.558614116822212e-01,-9.734489361183414e-01,-8.771711114944296e-01, 8.465999303170888e-01,-8.319822467713663e-01, 5.291032756854286e-02,-9.935203813401260e-01,-5.301187750231947e-01,-9.961517088434864e-01, 3.128792709078354e-02,-3.941637613412473e-01,-9.862845926370784e-01,-6.682249594899097e-01,-8.443681536636525e-01,-3.365520947720209e-01,-5.135579361166598e-01};
  const double cubS14[177] = {-5.692613549714406e-01,-8.567523903996869e-01, 2.937321767690869e-01,-8.319937625396620e-01,-5.193473480562776e-01, 1.412680487798826e-01, 4.440149956816773e-01,-9.708892474731111e-01,-9.593489098770824e-01, 9.951912644081932e-02,-9.749418803837925e-01,-3.684585382974073e-01, 3.502705143446270e-02,-2.308758062704557e-01,-8.300439114681392e-01,-6.644950594364012e-01,-2.829109456709421e-01,-7.457066474618167e-01, 3.067760377326236e-01,-5.505346489628263e-01,-7.902266429009204e-01,-3.871904504420789e-01,-8.215286306227646e-01, 2.308477306517287e-02, 8.095953613145350e-02,-9.854112892368967e-01,-5.863008773374992e-01,-3.820306143652253e-01,-8.052559327273110e-01,-7.985311971787540e-01,-9.815052727643349e-01,-2.019721875491939e-01,-9.823300269138270e-01, 1.665560319844528e-01,-9.569583489309840e-01,-9.678392999737244e-01, 7.979301210771497e-01,-8.623336520833290e-01,-9.645317122753843e-01,-2.307085927852067e-01,-9.945047520572895e-01,-3.276980727638241e-01,-5.452872262449433e-01, 6.079556793294856e-02,-5.326462754990520e-01,-2.476363726174116e-01,-5.383521084314242e-02,-8.432515189493912e-01,-2.982800071080640e-01, 1.044364208685466e-01,-8.160190642139122e-01,-9.731776707060575e-01, 3.225964073566463e-01,-5.414443953300053e-01, 6.687677811551758e-01,-9.554207271112243e-01,-9.619077322873879e-01,-4.774806610081035e-01,-9.846649841206343e-01,-3.987370345104631e-01,-8.753919064418382e-01,-5.679869113075616e-01, 1.435556153035758e-02,-5.214829016948568e-02,-2.114016861997780e-01,-9.655172118841225e-01,-8.406253388768438e-01,-9.623380148726018e-01,-9.608693011840216e-01,-8.028459184008299e-01,-9.605000973077215e-01, 6.116223916439572e-01, 5.419800458525613e-01,-9.609541747446029e-01,-6.013382886931526e-01,-9.470225600927738e-02,-6.433130187737914e-01,-6.902954537588261e-01,-9.184813465183521e-01,-9.079006849819555e-01,-2.062635049177409e-01,-5.886734938916006e-01,-8.917774773814240e-01, 6.822193673246273e-02,-5.529337075266429e-01, 3.004201958305422e-01,-8.003296766508911e-01,-8.572698174958018e-01,-8.457093705411737e-01,-6.135265713416332e-01, 4.123065091803993e-01,-9.611864986280264e-01,-6.019932601368023e-01, 5.755357972487538e-01,-8.118099987142103e-01,-8.023473755205793e-01, 5.231101115219017e-01,-5.921536175995283e-01,-9.597575687639091e-01,-2.994770969640125e-01,-9.072484447659134e-01,-2.757518889843976e-01,-6.779908687730015e-01,-9.233890657804160e-01,-1.713576967945722e-01,-8.059174914815999e-01,-4.296978649692322e-01,-4.923548227152426e-01,-9.624516025052400e-01,-7.971189807552889e-01, 3.909606769611551e-01,-9.635359245662354e-01, 3.513898553388829e-01,-8.084228945607991e-01,-9.835803988600607e-01,-4.129022988459327e-01,-8.047600052299576e-01,-5.846458394339499e-01, 7.089094525170311e-03,-5.806062924561544e-01, 1.566894708543361e-01,-2.353981070165389e-01,-9.664022120805861e-01, 6.958108951988492e-01,-9.613552545036335e-01,-8.472233495900784e-01,-7.690278404605405e-01,-7.770896833226055e-01,-9.793952947658595e-01,-9.410792865416145e-01,-6.449042333713295e-01,-2.200647816864868e-01,-6.089556124842277e-01,-9.235556209417903e-01,-5.931991810168001e-01, 1.603915248026716e-01,-9.650342420782030e-01,-2.414487369559702e-01,-8.175856314282485e-01,-9.917797371769650e-01, 1.138438287667271e-02,-9.904223104714033e-01, 9.053183821180540e-01,-9.814952923078711e-01,-2.280396216249042e-01,-2.160132996332856e-01,-6.171636437980160e-01, 9.587125237040388e-02,-8.641058019354901e-01,-8.389926351650465e-01,-6.923879278393541e-01,-3.354078332285020e-01,-3.010696584868394e-01, 3.602938355270157e-01,-7.969656816600444e-01,-7.958731300766900e-01,-9.887971646102336e-01,-7.919304509810771e-01,-4.251550483392493e-01,-9.558614116826611e-01,-5.741149257106475e-01,-9.574385047228751e-01, 8.465999303149507e-01,-9.734489361185846e-01,-8.771711114950046e-01,-9.935203813408606e-01,-8.319822467700391e-01, 5.291032756969321e-02, 3.128792709372000e-02,-5.301187750200479e-01,-9.961517088435393e-01,-3.941637613413972e-01,-9.862845926380797e-01,-6.682249594898159e-01,-8.443681536623480e-01,-3.365520947699970e-01,-5.135579361169699e-01};
  const double cubT14[177] = {-8.677184314001082e-01,-8.677184314013502e-01,-8.677184314014397e-01,-7.899269381888595e-01,-7.899269381834939e-01,-7.899269381852465e-01,-5.137768383309290e-01,-5.137768383287411e-01,-5.137768383292588e-01,-7.561187077554274e-01,-7.561187077568812e-01,-7.561187077559455e-01,-9.741073336963032e-01,-9.741073336962174e-01,-9.741073336967880e-01,-3.068873474294131e-01,-3.068873474319239e-01,-3.068873474323990e-01,-9.660147458686635e-01,-9.660147458680035e-01,-9.660147458683426e-01,-8.143656919989729e-01,-8.143656920003850e-01,-8.143656919991664e-01,-5.092473695541364e-01,-5.092473695566246e-01,-5.092473695560799e-01,-1.418225572800657e-02,-1.418225573432502e-02,-1.418225572608982e-02, 1.658074872242221e-01, 1.658074872273402e-01, 1.658074872337371e-01,-2.417583830790724e-01,-2.417583830712365e-01,-2.417583830824184e-01,-9.710647567190727e-01,-9.710647567187028e-01,-9.710647567195663e-01,-4.470885823916320e-01,-4.470885823924011e-01,-4.470885823880192e-01,-9.828620661897888e-01,-9.828620661897289e-01,-9.828620661896076e-01,-8.552768975909628e-01,-8.552768975906884e-01,-8.552768975901996e-01,-9.901373495478656e-01,-9.901373495471454e-01,-9.901373495460957e-01,-8.079743413184145e-01,-8.079743413186852e-01,-8.079743413191628e-01,-7.514393217564428e-01,-7.514393217582320e-01,-7.514393217532622e-01,-1.391173203618309e-01,-1.391173203605498e-01,-1.391173203594304e-01,-5.709767437822296e-01,-5.709767437793426e-01,-5.709767437801685e-01,-7.709328117426426e-01,-7.709328117429819e-01,-7.709328117421687e-01, 7.638326549330181e-01, 7.638326549376111e-01, 7.638326549308504e-01,-8.482763759340863e-01,-8.482763759353786e-01,-8.482763759345421e-01,-9.796875824148232e-01,-9.796875824146811e-01,-9.796875824145904e-01,-5.716892714592209e-01,-5.716892714564207e-01,-5.716892714580704e-01, 3.264553641769556e-02, 3.264553641816582e-02, 3.264553641853452e-02,-5.877709654590555e-01,-5.877709654604684e-01,-5.877709654585925e-01,-9.471568116500158e-01,-9.471568116501859e-01,-9.471568116504013e-01, 3.165057593730721e-01, 3.165057593814518e-01, 3.165057593799808e-01,-8.491267504154898e-01,-8.491267504155167e-01,-8.491267504146484e-01,-9.613784230132565e-01,-9.613784230132503e-01,-9.613784230132515e-01,-9.711989251592792e-01,-9.711989251593954e-01,-9.711989251594053e-01,-5.175225692848496e-01,-5.175225692843031e-01,-5.175225692851814e-01,-2.272623686536590e-01,-2.272623686539199e-01,-2.272623686533577e-01,-2.720298208326884e-01,-2.720298208350962e-01,-2.720298208332739e-01,-6.313900937014347e-01,-6.313900937008885e-01,-6.313900937012632e-01,-5.794310362105732e-01,-5.794310362107408e-01,-5.794310362108394e-01, 2.012427029337758e-01, 2.012427029353985e-01, 2.012427029338565e-01,-8.418369626352739e-01,-8.418369626355140e-01,-8.418369626340908e-01,-9.548891517575462e-01,-9.548891517576674e-01,-9.548891517574666e-01,-8.872322911059731e-01,-8.872322911052898e-01,-8.872322911067606e-01, 5.255128185486104e-01, 5.255128185486962e-01, 5.255128185480410e-01,-1.939516984007722e-01,-1.939516983998096e-01,-1.939516983993527e-01, 1.257104144430931e-01, 1.257104144429155e-01, 1.257104144429070e-01,-9.539085457686953e-01,-9.539085457687393e-01,-9.539085457687344e-01,-2.020190142730135e-01,-2.020190142699284e-01,-2.020190142710576e-01,-9.334007793387326e-01,-9.334007793395176e-01,-9.334007793399144e-01,-9.387834349447086e-01,-9.387834349445531e-01,-9.387834349447185e-01,-3.927728152701174e-01,-3.927728152699886e-01,-3.927728152709291e-01,-6.711345804459720e-01,-6.711345804455909e-01,-6.711345804457723e-01,-7.674550237911505e-01,-7.674550237908994e-01,-7.674550237914602e-01, 2.058826639314879e-01, 2.058826639322951e-01, 2.058826639318492e-01, 4.874148421139309e-01, 4.874148421164918e-01, 4.874148421202836e-01,-9.959798827017677e-01,-9.959798827003800e-01,-9.959798827032251e-01,-2.274076994581263e-01,-2.274076994588807e-01,-2.274076994575580e-01,-5.050174432265367e-01,-5.050174432283195e-01,-5.050174432250477e-01,-8.175087159753148e-01, 9.588537779156814e-01, 4.674878470335996e-03, 5.331044609837571e-01,-9.903437156880256e-01,-4.593261916505825e-01};
  const double cubW14[177] = { 5.760248903305241e-03, 5.760248903325903e-03, 5.760248903365261e-03, 8.932868689521610e-03, 8.932868689511656e-03, 8.932868689476301e-03, 2.076049498090074e-03, 2.076049498174885e-03, 2.076049498042698e-03, 4.911437360394771e-03, 4.911437360421683e-03, 4.911437360432558e-03, 4.632630603019636e-03, 4.632630603023865e-03, 4.632630602996896e-03, 1.478616415369785e-02, 1.478616415372260e-02, 1.478616415358613e-02, 5.161692502570879e-03, 5.161692502629611e-03, 5.161692502599545e-03, 1.140073505154521e-02, 1.140073505147236e-02, 1.140073505157061e-02, 4.040956960491586e-03, 4.040956960533503e-03, 4.040956960535977e-03, 1.214382348234666e-02, 1.214382348228025e-02, 1.214382348235584e-02, 1.340088420032186e-03, 1.340088420047175e-03, 1.340088420071598e-03, 2.752950520631146e-03, 2.752950520621246e-03, 2.752950520637114e-03, 1.331401247764424e-03, 1.331401247780917e-03, 1.331401247756442e-03, 2.684423028380161e-03, 2.684423028363544e-03, 2.684423028306820e-03, 5.069562772386248e-03, 5.069562772383122e-03, 5.069562772402412e-03, 1.094533055932680e-02, 1.094533055925776e-02, 1.094533055915119e-02, 2.717780254308358e-03, 2.717780254386791e-03, 2.717780254453796e-03, 5.079032159261387e-03, 5.079032159297902e-03, 5.079032159282812e-03, 2.316987739291757e-03, 2.316987739296989e-03, 2.316987739314384e-03, 5.266486904775362e-03, 5.266486904824209e-03, 5.266486904782348e-03, 1.395506591225304e-02, 1.395506591215987e-02, 1.395506591221747e-02, 7.232545731546133e-03, 7.232545731564914e-03, 7.232545731587993e-03, 2.098806854227512e-03, 2.098806854174692e-03, 2.098806854244964e-03, 4.095418260649108e-03, 4.095418260645926e-03, 4.095418260643578e-03, 2.013844392669503e-03, 2.013844392679473e-03, 2.013844392681934e-03, 2.006292561902968e-02, 2.006292561903576e-02, 2.006292561909558e-02, 7.636349045050322e-03, 7.636349044960237e-03, 7.636349045015122e-03, 1.339120189395926e-02, 1.339120189406734e-02, 1.339120189406358e-02, 7.281319055054554e-03, 7.281319054993121e-03, 7.281319054909172e-03, 9.799335256329167e-03, 9.799335256279062e-03, 9.799335256278751e-03, 5.441700720819044e-03, 5.441700720816442e-03, 5.441700720874283e-03, 4.832027392359751e-03, 4.832027392367500e-03, 4.832027392366722e-03, 2.623461512808826e-03, 2.623461512803495e-03, 2.623461512803665e-03, 1.530232186139421e-02, 1.530232186146322e-02, 1.530232186140284e-02, 1.282421163940995e-02, 1.282421163935870e-02, 1.282421163937584e-02, 1.960238059385917e-02, 1.960238059391475e-02, 1.960238059397032e-02, 6.461243759462251e-03, 6.461243759546609e-03, 6.461243759527885e-03, 6.574681086137257e-03, 6.574681086085157e-03, 6.574681086080772e-03, 4.619145926356672e-03, 4.619145926334002e-03, 4.619145926347734e-03, 1.763943232158073e-02, 1.763943232157564e-02, 1.763943232166799e-02, 3.780109952877583e-03, 3.780109952860302e-03, 3.780109952877427e-03, 3.494590792272494e-03, 3.494590792242060e-03, 3.494590792284953e-03, 4.191790076637947e-03, 4.191790076513666e-03, 4.191790076570659e-03, 1.217415884392229e-02, 1.217415884388091e-02, 1.217415884391409e-02, 1.239994032767911e-02, 1.239994032767526e-02, 1.239994032768864e-02, 4.107419260796993e-03, 4.107419260774153e-03, 4.107419260786400e-03, 3.036323024481491e-03, 3.036323024512674e-03, 3.036323024549628e-03, 4.083230290834423e-04, 4.083230290736291e-04, 4.083230290554777e-04, 1.259565293606578e-02, 1.259565293606549e-02, 1.259565293608774e-02, 1.343412553142801e-02, 1.343412553139515e-02, 1.343412553145282e-02, 2.386756526414242e-02, 2.386756526415388e-02, 2.386756526415473e-02, 1.341142697054699e-02, 1.341142697054656e-02, 1.341142697055976e-02, 4.126697319202634e-03, 4.126697319174223e-03, 4.126697319148965e-03, 3.824606804156526e-03, 3.824606804148607e-03, 3.824606804194654e-03, 5.154031158903054e-04, 5.154031159091442e-04, 5.154031158631511e-04, 3.008884311995277e-03, 3.008884312101371e-03, 3.008884312053670e-03, 3.475550074368887e-03, 3.475550074426672e-03, 3.475550074439499e-03, 1.985270760196320e-02, 1.768406287405760e-04, 2.162569384673413e-02, 6.346297860541651e-03, 3.834603804842544e-03, 2.542527774527081e-02};

  switch(N) {
    case 2: {
      arma::vec r_tmp(cubR2, 4); cubr = r_tmp;
      arma::vec s_tmp(cubS2, 4); cubs = s_tmp;
      arma::vec t_tmp(cubT2, 4); cubt = t_tmp;
      arma::vec w_tmp(cubW2, 4); cubw = w_tmp;
      break;
    }
    case 4: {
      arma::vec r_tmp(cubR4, 11); cubr = r_tmp;
      arma::vec s_tmp(cubS4, 11); cubs = s_tmp;
      arma::vec t_tmp(cubT4, 11); cubt = t_tmp;
      arma::vec w_tmp(cubW4, 11); cubw = w_tmp;
      break;
    }
    case 6: {
      arma::vec r_tmp(cubR6, 23); cubr = r_tmp;
      arma::vec s_tmp(cubS6, 23); cubs = s_tmp;
      arma::vec t_tmp(cubT6, 23); cubt = t_tmp;
      arma::vec w_tmp(cubW6, 23); cubw = w_tmp;
      break;
    }
    case 8: {
      arma::vec r_tmp(cubR8, 44); cubr = r_tmp;
      arma::vec s_tmp(cubS8, 44); cubs = s_tmp;
      arma::vec t_tmp(cubT8, 44); cubt = t_tmp;
      arma::vec w_tmp(cubW8, 44); cubw = w_tmp;
      break;
    }
    case 10: {
      arma::vec r_tmp(cubR10, 74); cubr = r_tmp;
      arma::vec s_tmp(cubS10, 74); cubs = s_tmp;
      arma::vec t_tmp(cubT10, 74); cubt = t_tmp;
      arma::vec w_tmp(cubW10, 74); cubw = w_tmp;
      break;
    }
    case 12: {
      arma::vec r_tmp(cubR12, 122); cubr = r_tmp;
      arma::vec s_tmp(cubS12, 122); cubs = s_tmp;
      arma::vec t_tmp(cubT12, 122); cubt = t_tmp;
      arma::vec w_tmp(cubW12, 122); cubw = w_tmp;
      break;
    }
    case 14: {
      arma::vec r_tmp(cubR14, 177); cubr = r_tmp;
      arma::vec s_tmp(cubS14, 177); cubs = s_tmp;
      arma::vec t_tmp(cubT14, 177); cubt = t_tmp;
      arma::vec w_tmp(cubW14, 177); cubw = w_tmp;
      break;
    }
    default:
      dg_abort("Unsupported order of 3D cubature (" + std::to_string(N) + ")");
  }
}

void DGConstants3D::calc_interp_mats() {
  // From n0 to n1
  for(int n0 = 1; n0 <= N_max; n0++) {
    arma::vec x_0, y_0, z_0, r_0, s_0, t_0;
    DGUtils::setRefXYZ(n0, x_0, y_0, z_0);
    DGUtils::xyz2rst(x_0, y_0, z_0, r_0, s_0, t_0);
    arma::mat v_0    = DGUtils::vandermonde3D(r_0, s_0, t_0, n0);
    arma::mat invV_0 = arma::inv(v_0);
    for(int n1 = 1; n1 <= N_max; n1++) {
      if(n0 != n1) {
        arma::vec x_1, y_1, z_1, r_1, s_1, t_1;
        DGUtils::setRefXYZ(n1, x_1, y_1, z_1);
        DGUtils::xyz2rst(x_1, y_1, z_1, r_1, s_1, t_1);
        arma::mat v_1    = DGUtils::vandermonde3D(r_1, s_1, t_1, n1);
        arma::mat invV_1 = arma::inv(v_1);
        arma::mat interp_;
        // arma::mat interp_ = DGUtils::interpMatrix3D(r_1, s_1, t_1, invV_0, n0);
        if(n1 > n0) {
          // interp_ = DGUtils::interpMatrix3D(r_0, s_0, t_0, invV_1, n1).t();
          // interp_ = DGUtils::interpMatrix3D(r_1, s_1, t_1, invV_0, n0);
          interp_ = DGUtils::interpMatrix3D(r_1, s_1, t_1, invV_0, n0);

          // arma::mat tmp_M(r_0.n_elem, r_0.n_elem, arma::fill::zeros);
          // arma::mat tmp_vT_inv_1 = arma::inv(v_1.t());
          // arma::mat tmp_vT_inv_0 = arma::inv(v_0.t());
          // for(int i = 0; i < r_0.n_elem; i++) {
          //   for(int j = 0; j < r_0.n_elem; j++) {
          //     for(int n = 0; n < r_0.n_elem; n++) {
          //       tmp_M(i, j) += tmp_vT_inv_0(i, n) * tmp_vT_inv_0(j, n);
          //     }
          //   }
          // }
          // arma::mat interp_points = DGUtils::interpMatrix3D(r_1, s_1, t_1, invV_0, n0);
          // interp_ = arma::inv(invV_1.t() * invV_1) * interp_points * tmp_M;
        } else {
          // interp_ = DGUtils::interpMatrix3D(r_1, s_1, t_1, invV_0, n0);
          // interp_ = DGUtils::interpMatrix3D(r_0, s_0, t_0, invV_1, n1).t();
          interp_ = DGUtils::interpMatrix3D(r_0, s_0, t_0, invV_1, n1).t();

          // arma::mat tmp_M(r_1.n_elem, r_1.n_elem, arma::fill::zeros);
          // arma::mat tmp_vT_inv_1 = arma::inv(v_1.t());
          // arma::mat tmp_vT_inv_0 = arma::inv(v_0.t());
          // for(int i = 0; i < r_1.n_elem; i++) {
          //   for(int j = 0; j < r_1.n_elem; j++) {
          //     for(int n = 0; n < r_0.n_elem; n++) {
          //       tmp_M(i, j) += tmp_vT_inv_1(i, n) * tmp_vT_inv_1(j, n);
          //     }
          //   }
          // }
          // arma::mat interp_points = DGUtils::interpMatrix3D(r_0, s_0, t_0, invV_1, n1);
          // interp_ = arma::inv(invV_0.t() * invV_0) * interp_points * tmp_M;
          // interp_ = interp_.t();
        }
        #ifdef DG_COL_MAJ
        arma::Mat<DG_FP> interp_2 = arma::conv_to<arma::Mat<DG_FP>>::from(interp_);
        #else
        arma::Mat<DG_FP> interp_2 = arma::conv_to<arma::Mat<DG_FP>>::from(interp_.t());
        #endif
        memcpy(&order_interp_ptr[((n0 - 1) * N_max + (n1 - 1)) * Np_max * Np_max], interp_2.memptr(), interp_2.n_elem * sizeof(DG_FP));
      }
    }
  }


  // for(int p0 = 0; p0 < N_max; p0++) {
  //   for(int p1 = p0 + 1; p1 < N_max; p1++) {
  //     memcpy(&order_interp_ptr[(p1 * DG_ORDER + p0) * DG_NP * DG_NP], &order_interp_ptr[(p0 * DG_ORDER + p1) * DG_NP * DG_NP], DG_NP * DG_NP * sizeof(DG_FP));
  //   }
  // }

  Dr_ptr_sp = (float *)calloc(N_max * Np_max * Np_max, sizeof(float));
  Ds_ptr_sp = (float *)calloc(N_max * Np_max * Np_max, sizeof(float));
  Dt_ptr_sp = (float *)calloc(N_max * Np_max * Np_max, sizeof(float));
  Drw_ptr_sp = (float *)calloc(N_max * Np_max * Np_max, sizeof(float));
  Dsw_ptr_sp = (float *)calloc(N_max * Np_max * Np_max, sizeof(float));
  Dtw_ptr_sp = (float *)calloc(N_max * Np_max * Np_max, sizeof(float));
  mass_ptr_sp = (float *)calloc(N_max * Np_max * Np_max, sizeof(float));
  invMass_ptr_sp = (float *)calloc(N_max * Np_max * Np_max, sizeof(float));
  invV_ptr_sp = (float *)calloc(N_max * Np_max * Np_max, sizeof(float));
  v_ptr_sp = (float *)calloc(N_max * Np_max * Np_max, sizeof(float));
  lift_ptr_sp = (float *)calloc(N_max * DG_NUM_FACES * Nfp_max * Np_max, sizeof(float));
  eMat_ptr_sp = (float *)calloc(N_max * DG_NUM_FACES * Nfp_max * Np_max, sizeof(float));
  order_interp_ptr_sp = (float *)calloc(N_max * N_max * Np_max * Np_max, sizeof(float));

  for(int i = 0; i < N_max * Np_max * Np_max; i++) {
    Dr_ptr_sp[i] = (float)Dr_ptr[i];
    Ds_ptr_sp[i] = (float)Ds_ptr[i];
    Dt_ptr_sp[i] = (float)Dt_ptr[i];
    Drw_ptr_sp[i] = (float)Drw_ptr[i];
    Dsw_ptr_sp[i] = (float)Dsw_ptr[i];
    Dtw_ptr_sp[i] = (float)Dtw_ptr[i];
    mass_ptr_sp[i] = (float)mass_ptr[i];
    invMass_ptr_sp[i] = (float)invMass_ptr[i];
    invV_ptr_sp[i] = (float)invV_ptr[i];
    v_ptr_sp[i] = (float)v_ptr[i];
  }

  for(int i = 0; i < N_max * DG_NUM_FACES * Nfp_max * Np_max; i++) {
    lift_ptr_sp[i] = (float)lift_ptr[i];
    eMat_ptr_sp[i] = (float)eMat_ptr[i];
  }

  for(int i = 0; i < N_max * N_max * Np_max * Np_max; i++) {
    order_interp_ptr_sp[i] = (float)order_interp_ptr[i];
  }

  transfer_kernel_ptrs();
}

DG_FP* DGConstants3D::get_mat_ptr(Constant_Matrix matrix) {
  switch(matrix) {
    case R:
      return r_ptr;
    case S:
      return s_ptr;
    case T:
      return t_ptr;
    case DR:
      return Dr_ptr;
    case DS:
      return Ds_ptr;
    case DT:
      return Dt_ptr;
    case DRW:
      return Drw_ptr;
    case DSW:
      return Dsw_ptr;
    case DTW:
      return Dtw_ptr;
    case MASS:
      return mass_ptr;
    case INV_MASS:
      return invMass_ptr;
    case INV_V:
      return invV_ptr;
    case V:
      return v_ptr;
    case LIFT:
      return lift_ptr;
    case MM_F0:
      return mmF0_ptr;
    case MM_F1:
      return mmF1_ptr;
    case MM_F2:
      return mmF2_ptr;
    case MM_F3:
      return mmF3_ptr;
    case EMAT:
      return eMat_ptr;
    case INTERP_MATRIX_ARRAY:
      return order_interp_ptr;
    case CUB3D_R:
      return cub_r_ptr;
    case CUB3D_S:
      return cub_s_ptr;
    case CUB3D_T:
      return cub_t_ptr;
    case CUB3D_W:
      return cub_w_ptr;
    case CUB3D_INTERP:
      return cubInterp_ptr;
    case CUB3D_PROJ:
      return cubProj_ptr;
    case CUB3D_PDR:
      return cubPDrT_ptr;
    case CUB3D_PDS:
      return cubPDsT_ptr;
    case CUB3D_PDT:
      return cubPDtT_ptr;
    case CUBSURF3D_INTERP:
      return cubInterpSurf_ptr;
    case CUBSURF3D_LIFT:
      return cubLiftSurf_ptr;
    default:
      dg_abort("This constant matrix is not supported by DGConstants3D\n");
      return nullptr;
  }
}

DGConstants3D::~DGConstants3D() {
  clean_up_kernel_ptrs();

  free(r_ptr);
  free(s_ptr);
  free(t_ptr);
  free(Dr_ptr);
  free(Ds_ptr);
  free(Dt_ptr);
  free(Drw_ptr);
  free(Dsw_ptr);
  free(Dtw_ptr);
  free(mass_ptr);
  free(invMass_ptr);
  free(invV_ptr);
  free(v_ptr);
  free(lift_ptr);
  free(mmF0_ptr);
  free(mmF1_ptr);
  free(mmF2_ptr);
  free(mmF3_ptr);
  free(eMat_ptr);
  free(order_interp_ptr);
  free(cubInterp_ptr);
  free(cubProj_ptr);
  free(cubPDrT_ptr);
  free(cubPDsT_ptr);
  free(cubPDtT_ptr);
  free(cubInterpSurf_ptr);
  free(cubLiftSurf_ptr);

  free(Dr_ptr_sp);
  free(Ds_ptr_sp);
  free(Dt_ptr_sp);
  free(Drw_ptr_sp);
  free(Dsw_ptr_sp);
  free(Dtw_ptr_sp);
  free(mass_ptr_sp);
  free(invMass_ptr_sp);
  free(invV_ptr_sp);
  free(v_ptr_sp);
  free(lift_ptr_sp);
  free(eMat_ptr_sp);
  free(order_interp_ptr_sp);
}
