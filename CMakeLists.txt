cmake_minimum_required(VERSION 3.18)
project(libop2dgtoolkit CXX)

# Import compiler flags for all build types
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14 -fPIC -fopenmp -g -O3")
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC -fopenmp -g -O3")
set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} --disable-warnings -g -O3")

if(NOT OP2_DIR)
  message(FATAL_ERROR "OP2_DIR is not specified")
endif()
include_directories(${OP2_DIR}/include)

if(NOT OPENBLAS_DIR)
  message(WARNING "OPENBLAS_DIR is not specified")
else()
  include_directories(${OPENBLAS_DIR}/include)
  set(OPENBLAS_LIB "-L${OPENBLAS_DIR}/lib -lopenblas")
  set(COMMON_LIBS ${OPENBLAS_LIB}) 
endif()

if(BUILD_MPI)
  find_package(MPI REQUIRED)

  if(NOT PART_LIB_NAME)
    message(FATAL_ERROR "PART_LIB_NAME is not specified")
  endif()

  if(PART_LIB_NAME STREQUAL "PARMETIS")
    if(NOT PARMETIS_DIR)
      message(WARNING "PARMETIS_DIR is not specified")
    else()
      include_directories(${PARMETIS_DIR}/include)
      set(PART_LIB "-L${PARMETIS_DIR}/lib -lparmetis -lmetis -lGKlib")
    endif()
  elseif(PART_LIB_NAME STREQUAL "PTSCOTCH")
    if(NOT PTSCOTCH_DIR)
      message(FATAL_ERROR "PTSCOTCH_DIR is not specified")
    else()
      include_directories(${PTSCOTCH_DIR}/include)
      set(PART_LIB "-L${PTSCOTCH_DIR}/lib -lptscotch -lscotch -lptscotcherr -lscotcherr -lptscotcherrexit -lscotcherrexit")
    endif()
  else()
    message(FATAL_ERROR "Unrecognised OP2 partitioning library specified in PART_LIB_NAME")
  endif()
endif()

if(NOT PETSC_DIR)
  message(FATAL_ERROR "PETSC_DIR is not specified")
endif()
include_directories(${PETSC_DIR}/include)
set(PETSC_LIB "-L${PETSC_DIR}/lib -lpetsc")
list(APPEND COMMON_LIBS ${PETSC_LIB})

if(NOT ARMA_DIR)
  message(WARNING "ARMA_DIR is not specified")
else()
  include_directories(${ARMA_DIR}/include)
  set(ARMA_LIB "-L${ARMA_DIR}/lib64 -larmadillo")
  list(APPEND COMMON_LIBS ${ARMA_LIB}) 
endif()

if(NOT AMGX_DIR)
  message(WARNING "AMGX_DIR is not specified, building without it.")
else()
  include_directories(${AMGX_DIR}/include)
  set(AMGX_LIB "-L${AMGX_DIR}/lib -lamgx")
  list(APPEND COMMON_COMPILER_DEFS INS_BUILD_WITH_AMGX)
endif()

if(NOT HYPRE_DIR)
  message(WARNING "HYPRE_DIR is not specified, building without it.")
else()
  include_directories(${HYPRE_DIR}/include)
  set(HYPRE_LIB "-L${HYPRE_DIR}/lib -lHYPRE")
  list(APPEND COMMON_LIBS ${HYPRE_LIB})
  list(APPEND COMMON_COMPILER_DEFS INS_BUILD_WITH_HYPRE)
endif()

if(NOT HDF5_DIR)
  message(WARNING "HDF5_DIR is not specified")
else()
  include_directories(${HDF5_DIR}/include)
  set(HDF5_LIB "-L${HDF5_DIR}/lib -lhdf5")
endif()

if(LIBXSMM_DIR)
include_directories(${LIBXSMM_DIR}/include)
set(LIBXSMM_COMPILE_OPTS -DNDEBUG -DTHRESHOLD=262144 OP2_DG_USE_LIBXSMM)
endif()

if(NOT INIPP_DIR)
  message(FATAL_ERROR "INIPP_DIR is not specified")
endif()
include_directories(${INIPP_DIR})

if(BUILD_GPU)
  enable_language(CUDA)
  find_package(CUDAToolkit)
  include_directories(${CUDAToolkit_INCLUDE_DIRS})
  set(CMAKE_CUDA_COMPILER ${CUDAToolkit_NVCC_EXECUTABLE})
  set(CMAKE_CUDA_ARCHITECTURES 70)
endif()

# Install headers
set(HEADERS include/dg_compiler_defs.h include/dg_op2_blas.h include/dg_utils.h include/dg_dat_pool.h include/op2_utils.h include/timing.h include/config.h)
install(FILES ${HEADERS} DESTINATION include)
set(HEADERS_DG_CONSTS include/dg_constants/dg_constants.h include/dg_constants/dg_constants_2d.h include/dg_constants/dg_constants_3d.h)
install(FILES ${HEADERS_DG_CONSTS} DESTINATION include/dg_constants)
set(HEADERS_DG_GLB_CONSTS include/dg_global_constants/dg_global_constants_2d.h include/dg_global_constants/dg_global_constants_3d.h)
list(APPEND HEADERS_DG_GLB_CONSTS include/dg_global_constants/dg_mat_constants_3d.h include/dg_global_constants/dg_mat_constants_dev_ptrs_3d.h)
list(APPEND HEADERS_DG_GLB_CONSTS include/dg_global_constants/dg_mat_constants_2d.h include/dg_global_constants/dg_mat_constants_dev_ptrs_2d.h)
install(FILES ${HEADERS_DG_GLB_CONSTS} DESTINATION include/dg_global_constants)
set(HEADERS_DG_MESH include/dg_mesh/dg_mesh.h include/dg_mesh/dg_mesh_2d.h include/dg_mesh/dg_mesh_3d.h)
install(FILES ${HEADERS_DG_MESH} DESTINATION include/dg_mesh)
set(HEADERS_LINEAR_SOLVERS include/dg_linear_solvers/amgx_amg.h)
list(APPEND HEADERS_LINEAR_SOLVERS include/dg_linear_solvers/hypre_amg.h)
list(APPEND HEADERS_LINEAR_SOLVERS include/dg_linear_solvers/initial_guess_extrapolation.h)
list(APPEND HEADERS_LINEAR_SOLVERS include/dg_linear_solvers/linear_solver.h)
list(APPEND HEADERS_LINEAR_SOLVERS include/dg_linear_solvers/petsc_amg_coarse.h)
list(APPEND HEADERS_LINEAR_SOLVERS include/dg_linear_solvers/petsc_amg.h)
list(APPEND HEADERS_LINEAR_SOLVERS include/dg_linear_solvers/petsc_block_jacobi.h)
list(APPEND HEADERS_LINEAR_SOLVERS include/dg_linear_solvers/petsc_inv_mass.h)
list(APPEND HEADERS_LINEAR_SOLVERS include/dg_linear_solvers/petsc_jacobi.h)
list(APPEND HEADERS_LINEAR_SOLVERS include/dg_linear_solvers/petsc_pmultigrid.h)
list(APPEND HEADERS_LINEAR_SOLVERS include/dg_linear_solvers/petsc_utils.h)
list(APPEND HEADERS_LINEAR_SOLVERS include/dg_linear_solvers/pmultigrid.h)
install(FILES ${HEADERS_LINEAR_SOLVERS} DESTINATION include/dg_linear_solvers)
set(HEADERS_MATRICES include/dg_matrices/poisson_coarse_matrix.h)
list(APPEND HEADERS_MATRICES include/dg_matrices/poisson_matrix_free_diag.h)
list(APPEND HEADERS_MATRICES include/dg_matrices/poisson_matrix_free.h)
list(APPEND HEADERS_MATRICES include/dg_matrices/poisson_matrix.h)
list(APPEND HEADERS_MATRICES include/dg_matrices/poisson_semi_matrix_free.h)
install(FILES ${HEADERS_MATRICES} DESTINATION include/dg_matrices)
set(HEADERS_MATRICES_2D include/dg_matrices/2d/factor_poisson_matrix_free_diag_2d.h)
list(APPEND HEADERS_MATRICES_2D include/dg_matrices/2d/factor_poisson_matrix_free_mult_2d.h)
list(APPEND HEADERS_MATRICES_2D include/dg_matrices/2d/poisson_matrix_free_2d.h)
list(APPEND HEADERS_MATRICES_2D include/dg_matrices/2d/poisson_matrix_free_diag_2d.h)
list(APPEND HEADERS_MATRICES_2D include/dg_matrices/2d/poisson_matrix_free_mult_2d.h)
list(APPEND HEADERS_MATRICES_2D include/dg_matrices/2d/factor_mm_poisson_matrix_free_diag_2d.h)
list(APPEND HEADERS_MATRICES_2D include/dg_matrices/2d/mm_poisson_matrix_free_2d.h)
list(APPEND HEADERS_MATRICES_2D include/dg_matrices/2d/factor_poisson_coarse_matrix_2d.h)
list(APPEND HEADERS_MATRICES_2D include/dg_matrices/2d/poisson_coarse_matrix_2d.h)
install(FILES ${HEADERS_MATRICES_2D} DESTINATION include/dg_matrices/2d)
set(HEADERS_MATRICES_3D include/dg_matrices/3d/factor_mm_poisson_matrix_3d.h)
list(APPEND HEADERS_MATRICES_3D include/dg_matrices/3d/factor_poisson_matrix_free_3d.h)
list(APPEND HEADERS_MATRICES_3D include/dg_matrices/3d/poisson_coarse_matrix_3d.h)
list(APPEND HEADERS_MATRICES_3D include/dg_matrices/3d/factor_poisson_matrix_free_diag_3d.h)
list(APPEND HEADERS_MATRICES_3D include/dg_matrices/3d/poisson_matrix_3d.h)
list(APPEND HEADERS_MATRICES_3D include/dg_matrices/3d/factor_mm_poisson_matrix_free_3d.h)
list(APPEND HEADERS_MATRICES_3D include/dg_matrices/3d/factor_poisson_matrix_free_mult_3d.h)
list(APPEND HEADERS_MATRICES_3D include/dg_matrices/3d/poisson_matrix_free_3d.h)
list(APPEND HEADERS_MATRICES_3D include/dg_matrices/3d/factor_mm_poisson_matrix_free_diag_3d.h)
list(APPEND HEADERS_MATRICES_3D include/dg_matrices/3d/factor_poisson_semi_matrix_free_3d.h)
list(APPEND HEADERS_MATRICES_3D include/dg_matrices/3d/poisson_matrix_free_diag_3d.h)
list(APPEND HEADERS_MATRICES_3D include/dg_matrices/3d/factor_mm_poisson_semi_matrix_free_3d.h)
list(APPEND HEADERS_MATRICES_3D include/dg_matrices/3d/mm_poisson_matrix_3d.h)
list(APPEND HEADERS_MATRICES_3D include/dg_matrices/3d/poisson_matrix_free_mult_3d.h)
list(APPEND HEADERS_MATRICES_3D include/dg_matrices/3d/poisson_semi_matrix_free_3d.h)
list(APPEND HEADERS_MATRICES_3D include/dg_matrices/3d/mm_poisson_matrix_free_3d.h)
list(APPEND HEADERS_MATRICES_3D include/dg_matrices/3d/factor_poisson_matrix_3d.h)
list(APPEND HEADERS_MATRICES_3D include/dg_matrices/3d/factor_poisson_coarse_matrix_3d.h)
install(FILES ${HEADERS_MATRICES_3D} DESTINATION include/dg_matrices/3d)

include_directories(${PROJECT_SOURCE_DIR}/include)

# Invoke subprojects
set(DIM 2)
add_subdirectory(gen_2d)
set(DIM 3)
add_subdirectory(gen_3d)
if(BUILD_TOOLS)
  add_subdirectory(tools)
endif()
if(BUILD_TESTS)
  add_subdirectory(tests)
endif()
